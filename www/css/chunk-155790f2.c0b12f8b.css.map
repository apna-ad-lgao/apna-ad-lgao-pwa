{"version":3,"sources":["webpack:///src/views/desktop/dashboard-pages/user-pages/src/views/desktop/dashboard-pages/user-pages/user-edit.vue"],"names":[],"mappings":"AAu2CA,2BACA,2BACA,CACA,sCACA,+CAAA,CAAA,uCACA,CACA,sCACA,+CACA,CACA,qCACA,GACA,kBACA,CACA,IACA,oBACA,CACA,GACA,kBACA,CACA","file":"chunk-155790f2.c0b12f8b.css","sourcesContent":["<template>\n  <section class=\"dashboard-user-edit-page h-min-screen bg-white p-5 mt-12\">\n    <h1\n      class=\"text-xl font-bold text-gray-700 mb-4\"\n    >\n      {{ $route.params.userId ? 'Edit user' : 'Add user' }}\n    </h1>\n    <!-- @submit.prevent=\"saveUser\" -->\n    <form>\n      <div class=\"md:flex flex-wrap lg:justify-between  justify-around relative\">\n        <div class=\"xl:w-1/6 mx-3 w-1/3 lg:w-1/4\">\n          <label\n            class=\"block font-bold letter-spacing-05 mt-3 mb-1 ml-1 text-gray-600 text-xs uppercase\"\n            for=\"ohrid\"\n          >OHR Id</label>\n          <input\n            id=\"ohrid\"\n            v-model=\"userOhrid\"\n            class=\"block appearance-none w-full bg-gray-100 border border-gray-400 text-lg\n            hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none\"\n            type=\"number\"\n            placeholder=\"Ex: 30000000\"\n            minlength=\"7\"\n            maxlength=\"9\"\n            :readonly=\"!isReadOnly\"\n          >\n        </div>\n        <div class=\"xl:w-1/6 mx-3 w-1/3 lg:w-1/4\">\n          <label\n            class=\"block font-bold letter-spacing-05 mt-3 mb-1 ml-1 text-gray-600 text-xs uppercase\"\n            for=\"ohrid\"\n          >First Name</label>\n          <input\n            id=\"ohrid\"\n            v-model=\"userFirstName\"\n            class=\"block appearance-none w-full bg-gray-100 border border-gray-400 hover:border-gray-500\n            px-4 py-2 rounded leading-tight focus:outline-none text-lg\"\n            type=\"text\"\n            placeholder=\"Ex: Rahul\"\n            :readonly=\"!isReadOnly\"\n          >\n        </div>\n        <div class=\"xl:w-1/6 mx-3 w-1/3 lg:w-1/4\">\n          <label\n            class=\"block font-bold letter-spacing-05 mt-3 mb-1 ml-1 text-gray-600 text-xs uppercase\"\n            for=\"ohrid\"\n          >Last Name</label>\n          <input\n            id=\"ohrid\"\n            v-model=\"userLastName\"\n            class=\"block appearance-none w-full bg-gray-100 border border-gray-400\n            hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none text-lg\"\n            type=\"text\"\n            placeholder=\"Ex: Jain\"\n            :readonly=\"!isReadOnly\"\n          >\n        </div>\n        <div class=\"xl:w-1/6 mx-3 w-1/3 lg:w-1/3\">\n          <label\n            class=\"block font-bold letter-spacing-05 mt-3 mb-1 ml-1 text-gray-600 text-grey-darkest text-xs uppercase\"\n            for=\"user-role-select\"\n          >User role</label>\n          <div class=\"relative\">\n            <select\n              id=\"user-role-select\"\n              ref=\"user-role-select\"\n              v-model=\"userRole\"\n              class=\"block appearance-none w-full bg-gray-100 border border-gray-400\n            hover:border-gray-500 px-4 py-2 pr-8 rounded leading-tight focus:outline-none text-lg\"\n              :disabled=\"isReadOnlyFeild\"\n              @change=\"checkOnchangeVocVod\"\n            >\n              <!--   @change=\"onUserRoleChanged\" -->\n              <option value>\n                ---\n              </option>\n              <option value=\"voc\">\n                VOS\n              </option>\n              <option value=\"vod\">\n                VOD\n              </option>\n            </select>\n            <div\n              class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-600\"\n            >\n              <svg\n                class=\"fill-current h-4 w-4\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n        <!-- <div class=\"xl:w-1/6 mx-3 w-1/3 lg:w-1/3\">\n          <label\n            class=\"block font-bold letter-spacing-05 mt-3 mb-1 ml-1 text-gray-600 text-grey-darkest text-xs uppercase\"\n            for=\"user-role-select\"\n          >Admin Role</label>\n          <div class=\"relative\">\n            <select\n              id=\"user-role-select\"\n              ref=\"user-role-select\"\n              v-model=\"adminRole\"\n              class=\"block appearance-none w-full bg-gray-100 border border-gray-400\n            hover:border-gray-500 px-4 py-2 pr-8 rounded leading-tight focus:outline-none text-lg\"\n              :disabled=\"isReadOnlyFeild\"\n            >\n              <option value=\"1\">\n                Yes\n              </option>\n              <option value=\"0\">\n                No\n              </option>\n            </select>\n            <div\n              class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-600\"\n            >\n              <svg\n                class=\"fill-current h-4 w-4\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n              </svg>\n            </div>\n          </div>\n        </div> -->\n      </div>\n      <div v-if=\"enableActivateButton\" class=\"cta-cont text-left my-6\">\n        <button class=\"bg-green-500 border-2 border-green-500 mx-1 px-4 py-1 rounded text-white w-24 w-50\" @click=\"modalActivateUser = true\">\n          <span>Activate</span>\n        </button>\n      </div>\n      <div v-if=\"!enableActivateButton\" class=\"cta-cont text-left my-6\">\n        <button class=\"bg-red-500 border-2 border-red-500 mx-1 px-4 py-1 rounded text-white w-24 w-50\" @click=\"modalDisableUserFunc\">\n          <span>Delete</span>\n        </button>\n        <button\n          v-if=\"enableSaveButton\"\n          class=\"border-2 rounded px-4 py-1 w-24 mx-1\"\n          :class=\"!saveButtonDisable ? 'border-green-400 text-green-500 w-24' : 'border-gray-400 text-gray-500'\"\n          :disabled=\"saveButtonDisable\"\n          @click=\"updateUser\"\n        >\n          <span>Save</span>\n        </button>\n        <button\n\n          class=\"border-2 rounded px-4 py-1 w-24 mx-1\"\n          :class=\"!enableSaveButton ? 'border-red-400 text-red-500 w-24' : 'border-gray-400 text-gray-500'\"\n          :disabled=\"enableSaveButton\"\n          @click=\"updateEditMode\"\n        >\n          <span>Edit</span>\n        </button>\n        <!-- <button\n          class=\"border-2 rounded px-4 py-1 w-24\"\n          :class=\" 'border-red-400 text-red-500'\"\n          @click=\"softDeleteUser(index)\"\n        >\n          <span>Delete</span>\n        </button> -->\n      </div>\n      <!-- Dynamic company vertical section -->\n      <h1 v-if=\"userRole && (userRole === 'voc' || userRole === 'vod' ) \" class=\"text-xl font-bold text-gray-700 mb-4 mt-4\">\n        {{ 'Assigned Accounts' }}\n      </h1>\n      <div class=\"bg-gray-200 flex items-center justify-center rounded my-3 py-2\">\n        <p class=\"text-gray-700\">\n          Showing accounts <span class=\"font-bold\">{{ filteredResults.length > 1 ? '' : '' }}: {{ filteredResults.length }}</span>\n        </p>\n        <button\n          v-if=\" statusFilter\"\n          class=\"bg-red-500 mx-5 px-3 py-2 rounded text-bold text-white\"\n          @click.prevent.stop=\"resetFilters\"\n        >\n          Reset Filter\n        </button>\n        <div class=\"mx-5 flex text-gray-600 justify-center\">\n          <div class=\"w-auto relative\">\n            <div class=\"pointer-events-none absolute inset-y-0 left-0 flex items-center px-2 pr-4 text-gray-600\">\n              <i class=\"fas fa-filter text-sm\" />\n            </div>\n            <select\n              v-model=\"statusFilter\"\n              class=\"\n                block\n                appearance-none\n                w-full\n                bg-gray-100\n                border\n                border-gray-400\n                hover:border-gray-500\n                px-6\n                py-2\n                rounded\n                leading-tight\n                focus:outline-none\n              \"\n            >\n              <option value=\"\">\n                Filter by  Status\n              </option>\n              <option value=\"0\">\n                Active\n              </option>\n              <option value=\"1\">\n                In-Active\n              </option>\n            <!-- <option v-for=\"status in companyStatus\" :key=\"status\" :value=\"status\">\n                {{ status }}\n              </option> -->\n            </select>\n            <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n              <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" /></svg>\n            </div>\n          </div>\n        </div>\n\n        <div\n          v-if=\"statusFilter \"\n          class=\"mx-5 text-gray-600\"\n        >\n          <div class=\"flex items-center\">\n            <p class=\"font-bold\">\n              Filtered by :\n            </p>\n            <span v-if=\"statusFilter\" class=\"text-gray-600\">\n              <label class=\"border border-gray-400 bg-gray-300 inline-block px-3 py-2 mx-5 pointer rounded\">\n                Status: <b>{{ parseInt(this.statusFilter) === 1 ?'In-Active':'Active' }}</b>\n              </label>\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <section v-if=\"filteredResults\" class=\"flex flex-wrap justify-between items-center\">\n        <div v-for=\"(companyVerticalRow, index) in filteredResults\" :key=\"index\" class=\"userCard w-2/35 border border-gray-400 my-6 p-1 p-2 rounded-lg\">\n          <!-- User comapnies list -->\n          <div v-if=\"userRole && (userRole === 'voc' || userRole === 'vod')\">\n            <div v-if=\"publicUserCompanyList\" class=\"relative\">\n              <div v-if=\"companyVerticalRow.userCompanyStatus\" class=\"text-red-500 font-bold letter-spacing-1 underline rounded text-center text-xs\">\n                NOTE : Company access revoked !!\n              </div>\n              <div v-if=\"companyVerticalRow.isHidden\" class=\"text-red-500 font-bold letter-spacing-1 underline rounded text-center text-xs\">\n                NOTE : company is already disabled !!\n              </div>\n              <label\n                class=\"block font-bold letter-spacing-05 mt-3 mb-1 ml-1 text-gray-600 text-grey-darkest text-xs uppercase\"\n                for=\"user-account-select\"\n              >Account to be aligned</label>\n              <div class=\"relative\">\n                <select\n                  v-if=\"publicUserCompanyList\"\n                  id=\"user-account-select\"\n                  ref=\"user-account-select\"\n                  v-model=\"companyVerticalRow.selectedAccount\"\n                  class=\"block appearance-none w-full bg-gray-100\n                  border border-gray-400 hover:border-gray-500 px-4 py-2 pr-8 rounded leading-tight focus:outline-none\"\n                  :disabled=\"!companyVerticalRow.isEditingCompanyVertical\"\n                  @change=\"onAccountSelect(companyVerticalRow, $event)\"\n                >\n                  <option\n                    v-for=\"(item) in accountData\"\n                    :key=\"item.id\"\n                    :data-id=\"item.id\"\n                    :value=\"item.id\"\n                  >\n                    {{ item.name }}\n                    <br>\n                  </option>\n                </select>\n                <div\n                  class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-600\"\n                >\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path\n                      d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"\n                    />\n                  </svg>\n                </div>\n              </div>\n            </div>\n            <div class=\"relative\">\n              <label\n                class=\"block font-bold letter-spacing-05 mt-3 mb-1 ml-1 text-gray-600 text-grey-darkest text-xs uppercase\"\n                for=\"user-vertical-select\"\n              >\n                Vertical\n              </label>\n              <div class=\"relative\">\n                <input\n                  id=\"\"\n                  v-model=\"companyVerticalRow.selectedVertical\"\n                  class=\"block appearance-none w-full bg-gray-100 border border-gray-400 hover:border-gray-500 px-4\n                   py-2 rounded leading-tight focus:outline-none\"\n                  type=\"text\"\n                  placeholder=\"Ex: Jain\"\n                  :readonly=\"true\"\n                >\n                <!-- {{ companyVerticalRow.selectedVertical }} -->\n              </div>\n            </div>\n            <div class=\"cta-cont text-right my-4\">\n              <button\n                v-if=\"companyVerticalRow.isEditingCompanyVertical && !enableActivateButton\"\n                class=\"border-2 rounded px-4 py-1 w-24 mx-1\"\n                :class=\"enableAddCompanyButton ? 'border-green-400 text-green-500' : 'border-gray-400 text-gray-500 w-24'\"\n                :disabled=\"!enableAddCompanyButton\"\n                @click=\"makeCompanyVerticalEditable(companyVerticalRow)\"\n              >\n                <span v-if=\"companyVerticalRow.isEditingCompanyVertical\">Save</span>\n                <span v-else>Edit</span>\n              </button>\n              <button\n                v-if=\"!enableActivateButton && !companyVerticalRow.userCompanyStatus && !companyVerticalRow.isHidden\"\n                class=\"border-2 rounded px-4 py-1 w-24 mx-1\"\n                :class=\"!companyVerticalRow.isEditingCompanyVertical ? 'border-red-400 text-red-500' : 'border-gray-400 text-gray-500'\"\n\n                @click=\"softDeleteUserCompany(index)\"\n              >\n                Delete\n              </button>\n              <button\n                v-if=\"!enableActivateButton && companyVerticalRow.userCompanyStatus\"\n                class=\"border-2 rounded px-4 py-1 w-24 mx-1\"\n                :class=\"!companyVerticalRow.isEditingCompanyVertical ? 'border-green-400 text-green-500' : 'border-gray-400 text-gray-500'\"\n\n                @click=\"ActivateUserCompany(index)\"\n              >\n                Activate\n              </button>\n            </div>\n          </div>\n          <!-- add user company -->\n        </div>\n        <!-- add company vertical row -->\n        <div v-if=\"userRole && (userRole === 'voc' || userRole === 'vod') && !enableActivateButton\" class=\"cta-cont w-full mx-auto mb-5\">\n          <button\n            class=\"border-2 border-gray-300 rounded px-4 py-1 text-gray-700 w-64 mx-auto border-green-400 text-green-500 block\"\n            @click.prevent=\"addNewRowForCompanyVertical()\"\n          >\n            Assign To Company Vertical\n          </button>\n        </div>\n      </section>\n    </form>\n\n    <template>\n      <transition name=\"bounce\">\n        <div v-if=\"modalDisableUser\" class=\"modal fixed w-full h-full top-0 left-0 flex items-center justify-center z-10\">\n          <div class=\"modal-overlay absolute w-full h-full bg-gray-900 opacity-50\" />\n\n          <div class=\"bg-white flex flex-col modal-container w-5/6 bg-white mx-4 rounded shadow-lg z-10 h-64 lg:w-1/3 overflow-y-auto\">\n            <div class=\"bg-red-500 font-bold px-5 py-1 rounded text-2xl text-center text-white\">\n              <p class=\"title\">\n                Choose an Option!\n              </p>\n            </div>\n            <h3 class=\"font-bold mx-auto my-6 px-2 py-6 text-black text-xl\">\n              Are you sure that you want to \"DELETE\" this User.\n            </h3>\n            <div class=\"flex justify-around\">\n              <button class=\"border-2 border-red-500 font-bold px-3 rounded text-red-500 text-lg\" @click=\"DeleteUser\">\n                Delete\n              </button>\n              <button class=\"border-2 border-gray-500 font-bold px-3 rounded text-gray-500 text-lg\" @click=\"leaveConfirmBox\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </transition>\n    </template>\n\n    <template>\n      <transition name=\"bounce\">\n        <div v-if=\"modalActivateUser\" class=\"modal fixed w-full h-full top-0 left-0 flex items-center justify-center z-10\">\n          <div class=\"modal-overlay absolute w-full h-full bg-gray-900 opacity-50\" />\n\n          <div class=\"bg-white flex flex-col modal-container w-5/6 bg-white mx-4 rounded shadow-lg z-10 h-64 lg:w-1/3 overflow-y-auto\">\n            <div class=\"bg-red-500 font-bold px-5 py-1 rounded text-2xl text-center text-white\">\n              <p class=\"title\">\n                Choose an Option!\n              </p>\n            </div>\n            <h3 class=\"font-bold mx-auto my-6 px-2 py-6 text-black text-xl\">\n              Are you sure that you want to \"ACTIVATE\" this User.\n            </h3>\n            <div class=\"flex justify-around\">\n              <button class=\"border-2 border-green-500 font-bold px-3 rounded text-green-500 text-lg\" @click=\"ActivateUser\">\n                Enable\n              </button>\n              <button class=\"border-2 border-gray-500 font-bold px-3 rounded text-gray-500 text-lg\" @click=\"leaveConfirmBox\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </transition>\n    </template>\n\n    <template>\n      <transition name=\"bounce\">\n        <div v-if=\"popupUserActionDisable\" class=\"modal fixed w-full h-full top-0 left-0 flex items-center justify-center z-10\">\n          <div class=\"modal-overlay absolute w-full h-full bg-gray-900 opacity-50\" />\n          <div class=\"bg-white flex flex-col justify-between modal-container w-5/6 bg-white mx-4 rounded shadow-lg z-10 h-64 lg:w-1/3 overflow-y-auto\">\n            <div class=\"bg-red-500 font-bold px-5 py-1 rounded text-2xl text-center text-white\">\n              <p class=\"title\">\n                Attention!\n              </p>\n            </div>\n            <h2 class=\"font-bold mx-auto px-2 text-black text-xl\">\n              {{ popupRole }},\n            </h2>\n            <h3 class=\"font-bold text-black px-2 text-center text-lg\">\n              {{ popupText }}\n            </h3>\n            <div class=\"flex justify-center pb-5\">\n              <button class=\"border-2 border-gray-600 font-bold px-3 rounded text-gray-600 text-lg\" @click=\"leave\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </transition>\n    </template>\n    <template>\n      <transition name=\"bounce\">\n        <div v-if=\"modalDisableCompany\" class=\"modal fixed w-full h-full top-0 left-0 flex items-center justify-center z-10\">\n          <div class=\"modal-overlay absolute w-full h-full bg-gray-900 opacity-50\" />\n\n          <div class=\"bg-white flex flex-col modal-container w-5/6 bg-white mx-4 rounded shadow-lg z-10 overflow-y-auto\">\n            <div class=\"bg-red-500 font-bold px-5 py-1 rounded text-2xl text-center text-white\">\n              <p class=\"title\">\n                Choose an Option!\n              </p>\n            </div>\n            <h3 class=\"font-bold mx-auto my-6 px-2 py-6 text-black text-xl\">\n              You can not Delete this Company, Because this User is last VOC/VOD in this Company.\n            </h3>\n            <div class=\"flex justify-center\">\n              <button class=\"border-2 border-gray-500 font-bold px-3 rounded text-gray-500 text-lg\" @click=\"leaveConfirmBox\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </transition>\n    </template>\n  </section>\n</template>\n\n<script>\nimport ADD_USER from '@/graphql/addUser.gql';\nimport FETCH_ALL_COMPANIES from '@/graphql/fetchAllCompanies.gql';\nimport FETCH_USER_DETAIL from '@/graphql/fetchUser.gql';\n// import GETALL_VERTICALS from '@/graphql/fetchAllVerticals.gql';\nimport GETALL_VERTICALS_FROM_COMPANY from '@/graphql/getVerticalByCompany.gql';\n// import UPDATE_USER from '@/graphql/updateUser.gql';\nimport UPDATE_USER_STATE from '@/graphql/updateUserState.gql';\n// import UPDATE_USERS_FLAG from '@/graphql/updateUsersFlag.gql';\nimport UPDATE_USERS_COMPANY_FLAG from '@/graphql/updateUserCompanyByVerticalFlag.gql';\nimport ADD_USER_TO_COMPANY_VERTICAL from '@/graphql/addUserToCompanyVertical.gql';\nimport ADD_USER_TO_COMPANY_VERTICALS from '@/graphql/addUserToCompanyVerticalS.gql';\nimport UPDATE_COMPANY_VERICAL from '@/graphql/updateCompanyVertical.gql';\nimport ADD_USER_COMPANY from '@/graphql/addUserCompany.gql';\nimport UPDATE_USER_COMPANY from '@/graphql/updateUserCompany.gql';\nimport GET_VERTICALS_FOR_COMPANY from '@/graphql/getAllVerticalsForCompany.gql';\nimport GET_VOC_VOD_LIST from '@/graphql/fetchCompanyVocAndVod.gql';\nimport GET_VOC_VOD_COMPANY from '@/graphql/fetchCompanyVocAndVodFromCompVertical.gql';\n// this can be use to update and data\nimport GET_USER_COMAPNY_VERTICALS from '@/graphql/publicUserCompanyList.gql';\nimport GET_ALL_COMPANY_VERTICALS from '@/graphql/publicUserCompanyVerticalList.gql';\n\nexport default {\n  name: 'UserEdit',\n  data() {\n    return {\n      userId: '',\n      userOhrid: '',\n      saveButtonStatus: true,\n      enableSaveButton: false,\n      userFirstName: '',\n      isHidden: '',\n      userLastName: '',\n      userRole: '',\n      adminRole: '',\n      enableActivateButton: false,\n      enableAddCompanyButton: true,\n      isEditMode: false,\n      selectedAccount: '',\n      languages: [1],\n      statusFilter: '',\n      accountData: [],\n      verticalData: [],\n      modalDisableUser: false,\n      modalActivateUser: false,\n      selectedVertical: '',\n      validationErrors: [],\n      isReadOnly: true,\n      isReadOnlyFeild: true,\n      editSaveToggle: [],\n      isEditingCompanyVertical: false,\n      popupUserActionDisable: false,\n      currentRoleUser: false,\n      modalDisableCompany: false,\n      popupText: '',\n      popupRole: '',\n      editableCompanyVerticals: [\n        // {\n        //   id: '',\n        //   companyId: '',\n        //   verticalId: '',\n        //   isEditingCompanyVertical: false,\n        //   selectedAccount: '',\n        //   selectedVertical: '',\n        //   softDeleteRequired: false,\n        // },\n      ],\n      publicUserCompanyList: [],\n    };\n  },\n  computed: {\n    saveButtonDisable() {\n      // TODO: Review this one! using same function to disable button and change its color\n\n      if (this.adminRole === 1) {\n        return false;\n      } if (this.userRole === '') {\n        return true;\n      }\n      return false;\n    },\n\n    filteredResults() {\n      const statusFilter = parseInt(this.statusFilter, 10);\n      try {\n        let companies = this.editableCompanyVerticals ? [...this.editableCompanyVerticals] : [];\n        if (this.statusFilter) {\n          if (statusFilter === 0) {\n            companies = companies.filter((company) => company.isHidden === statusFilter && company.userCompanyStatus === statusFilter);\n          } else {\n            companies = companies.filter((company) => company.isHidden === statusFilter || company.userCompanyStatus === statusFilter);\n          }\n\n          // companies = companies.filter(({ isHidden }) => isHidden == this.statusFilter  );\n          // companies = companies.filter(({ userCompanyStatus }) => userCompanyStatus == this.statusFilter);\n        }\n\n        return companies;\n      } catch (err) {\n        console.warn(err.message, err); // eslint-disable-line\n        return [];\n      }\n    },\n  },\n  watch: {\n    $route(currentVal, oldVal) {\n      if (oldVal.name === 'Dashboard.Admin' && currentVal.name === 'Dashboard.User.Edit') {\n        this.renderReady = false;\n        this.getUserDetails();\n        this.onUserRoleChanged();\n        this.getUserCompanyVerticals();\n        // this.onAccountSelect();\n        this.getAllCompanyVerticals();\n      }\n    },\n  },\n  deactivated() {\n    this.userOhrid = '';\n    this.userFirstName = '';\n    this.userLastName = '';\n    this.userRole = '';\n    this.adminRole = '';\n    this.selectedAccount = '';\n    this.selectedVertical = '';\n    this.accountData = [];\n    this.verticalData = [];\n    this.validationErrors = [];\n  },\n  async  mounted() {\n    await this.getUserDetails();\n    await this.onUserRoleChanged();\n    await this.getUserCompanyVerticals();\n    // this.onAccountSelect();\n    await this.getAllCompanyVerticals();\n  },\n  methods: {\n    leaveConfirmBox() {\n      this.modalDisableUser = false;\n      this.modalActivateUser = false;\n    },\n    resetFilters() {\n      this.statusFilter = '';\n    },\n    async addUser(firstName, lastName, ohrid, isVOC, isVOD, isReviewer, isAdmin, companyId, verticalId) {\n      try {\n        await this.$apollo.mutate({\n          mutation: ADD_USER,\n          variables: {\n            firstName,\n            lastName,\n            ohrid,\n            isVOC,\n            isVOD,\n            isReviewer,\n            isAdmin,\n            companyId,\n            verticalId,\n          },\n        });\n        // console.log('addUser', result);\n      } catch (error) {\n        // console.log(error.message);\n      }\n    },\n    async checkOnchangeVocVod() {\n      // console.log(this.currentRoleUser);\n      const id = parseInt(this.$route.params.userId, 10);\n      const { data } = await this.$apollo.query({\n        query: GET_VOC_VOD_LIST,\n        variables: {\n          id,\n        },\n      });\n\n      // console.log(data);\n      for (let i = 0; i < data.fetchCompanyVocAndVod.length; i += 1) {\n        if (this.currentRoleUser === 'voc') {\n        //  console.log(\"call voc\");\n        //  console.log(parseInt( data.fetchCompanyVocAndVod[i].voc , 10 ));\n          if (parseInt(data.fetchCompanyVocAndVod[i].voc, 10) <= 1) {\n            this.popupUserActionDisable = true;\n            this.popupRole = `You are not allowed to change user role to ${this.userRole}`;\n            this.userRole = this.currentRoleUser;\n            this.popupText = `As you were last aligned As ${this.currentRoleUser} with company  ' ${data.fetchCompanyVocAndVod[i].name} '`;\n\n            return;\n          }\n        } else {\n          // console.log(\"call vod\");\n          // console.log(parseInt( data.fetchCompanyVocAndVod[i].vod , 10 ));\n          this.popupRole = `You are not allowed to change user role to ${this.userRole}`;\n          this.userRole = this.currentRoleUser;\n          this.popupText = `As you were last aligned As ${this.currentRoleUser} with company ' ${data.fetchCompanyVocAndVod[i].name} '`;\n\n          if (parseInt(data.fetchCompanyVocAndVod[i].vod, 10) <= 1) {\n            this.popupUserActionDisable = true;\n            return;\n          }\n        }\n      }\n    },\n    async modalDisableUserFunc() {\n      const id = parseInt(this.$route.params.userId, 10);\n      const { data } = await this.$apollo.query({\n        query: GET_VOC_VOD_LIST,\n        variables: {\n          id,\n        },\n      });\n\n      // console.log(data);\n      let errorCheck = false;\n      for (let i = 0; i < data.fetchCompanyVocAndVod.length; i += 1) {\n        if (this.currentRoleUser === 'voc') {\n        //  console.log(\"call voc\");\n        //  console.log(parseInt( data.fetchCompanyVocAndVod[i].voc , 10 ));\n          if (parseInt(data.fetchCompanyVocAndVod[i].voc, 10) <= 1) {\n            this.popupUserActionDisable = true;\n            this.popupRole = 'You are not allowed to delete this User';\n            this.popupText = `As you were last aligned As ${this.currentRoleUser} with company  ' ${data.fetchCompanyVocAndVod[i].name} '`;\n\n            // this.popupText = \"user  is aligned as  last VOC in company '\"+data.fetchCompanyVocAndVod[i].name+\"'\";\n            errorCheck = true;\n            break;\n          }\n        } else if (parseInt(data.fetchCompanyVocAndVod[i].vod, 10) <= 1) {\n          // console.log(\"call vod\");\n          // // console.log(parseInt( data.fetchCompanyVocAndVod[i].vod , 10 ));\n          // if (parseInt(data.fetchCompanyVocAndVod[i].vod, 10) <= 1) {\n          this.popupRole = 'You are not allowed to delete this User';\n          this.popupText = `As you were last aligned As ${this.currentRoleUser} with company  ' ${data.fetchCompanyVocAndVod[i].name} '`;\n\n          // this.popupText = \"user  is aligned as last VOD in company '\"+data.fetchCompanyVocAndVod[i].name+\"'\";\n          this.popupUserActionDisable = true;\n          errorCheck = true;\n        }\n      }\n      if (errorCheck === false) {\n        this.modalDisableUser = true;\n      }\n    },\n    leave() {\n      this.popupUserActionDisable = false;\n      this.enableSaveButton = false;\n      this.isReadOnlyFeild = true;\n    },\n    async updateUser() {\n      try {\n        // console.log(this.userId);\n        // console.log(this.userRole);\n        this.enableSaveButton = false;\n        this.isReadOnlyFeild = true;\n        // console.log(\"save button status : \"+this.saveButtonDisable);\n\n        // / break();\n\n        const variable = {\n          userId: 0,\n          isVoc: 0,\n          isVod: 0,\n          isAdmin: 0,\n          isHidden: 0,\n        };\n\n        if (this.userRole === 'voc') {\n          variable.isVoc = 1;\n        } else if (this.userRole === 'vod') {\n          variable.isVod = 1;\n        }\n        // if (this.adminRole === 1) {\n        //   variable.isAdmin = 1;\n        // }\n        variable.isHidden = this.isHidden;\n        variable.userId = this.userId;\n        // console.log(variable);\n        // await this.$apollo.mutate({\n        //   mutation: UPDATE_USER,\n        //   variables: variable,\n        // });\n        // console.log('updateUser', data);\n        this.$store.dispatch('addToastNotifications', {\n          text: 'User Updated Successfully !',\n          timer: 4000,\n          type: 'success',\n        });\n      } catch (error) {\n        // console.log(error.message);\n        this.$store.dispatch('addToastNotifications', {\n          text: error.message,\n          timer: 4000,\n          type: 'error',\n        });\n      }\n    },\n    updateEditMode() {\n      this.enableSaveButton = true;\n      this.isReadOnlyFeild = false;\n    },\n    async addUserToCompanyVertical(userId, companyId, verticalId) {\n      try {\n        await this.$apollo.mutate({\n          mutation: ADD_USER_TO_COMPANY_VERTICAL,\n          variables: {\n            userId,\n            companyId,\n            verticalId,\n          },\n        });\n        // console.log('addUserToCompanyVertical', data);\n      } catch (error) {\n        // console.log(error.message);\n      }\n    },\n    async addUserToCompanyVerticalS(userId, companyvId) {\n      try {\n        await this.$apollo.mutate({\n          mutation: ADD_USER_TO_COMPANY_VERTICALS,\n          variables: {\n            companyvId,\n            userId,\n          },\n        });\n        this.$store.dispatch('addToastNotifications', {\n          text: 'Company aligned to User   Successfully !',\n          timer: 4000,\n          type: 'success',\n        });\n        // await this.getUserCompanyVerticals();\n        // console.log('addUserToCompanyVertical', data);\n        this.$router.go(this.$router.currentRoute);\n      } catch (error) {\n        this.$store.dispatch('addToastNotifications', {\n          text: error.message,\n          timer: 4000,\n          type: 'error',\n        });\n        this.enableAddCompanyButton = !this.enableAddCompanyButton;\n\n        // console.log(error.message);\n      }\n    },\n\n    async hiddenUserCompany(id, userId, isHidden) {\n      try {\n        await this.$apollo.mutate({\n          mutation: UPDATE_USERS_COMPANY_FLAG,\n          variables: {\n            id,\n            userId,\n            isHidden,\n          },\n        });\n        // console.log('addUserToCompanyVertical', data);\n\n        this.$store.dispatch('addToastNotifications', {\n          text: 'Company Deleted Successfully !',\n          timer: 4000,\n          type: 'success',\n        });\n      } catch (error) {\n        this.$store.dispatch('addToastNotifications', {\n          text: error.message,\n          timer: 4000,\n          type: 'error',\n        });\n\n        // console.log(error.message);\n      }\n    },\n\n    async enableUserCompany(id, userId, isHidden) {\n      try {\n        await this.$apollo.mutate({\n          mutation: UPDATE_USERS_COMPANY_FLAG,\n          variables: {\n            id,\n            userId,\n            isHidden,\n          },\n        });\n        // console.log('addUserToCompanyVertical', data);\n\n        this.$store.dispatch('addToastNotifications', {\n          text: 'Company Activated Successfully !',\n          timer: 4000,\n          type: 'success',\n        });\n      } catch (error) {\n        this.$store.dispatch('addToastNotifications', {\n          text: error.message,\n          timer: 4000,\n          type: 'error',\n        });\n\n        // console.log(error.message);\n      }\n    },\n\n    async updateCompanyVertical(companyVerticalId, companyId, verticalId, userCompanyId, userId) {\n      try {\n        await this.$apollo.mutate({\n          mutation: UPDATE_COMPANY_VERICAL,\n          variables: {\n            companyVerticalId,\n            companyId,\n            verticalId,\n            userCompanyId,\n            userId,\n          },\n        });\n        // console.log('updateCompanyVertical', data);\n      } catch (error) {\n        // console.log(error.message);\n      }\n    },\n    async addUserCompany(companyVerticalId, userId) {\n      try {\n        await this.$apollo.mutate({\n          mutation: ADD_USER_COMPANY,\n          variables: {\n            companyVerticalId,\n            userId,\n          },\n        });\n        // console.log('addUserCompany', data);\n      } catch (error) {\n        // console.log(error.message);\n      }\n    },\n    async updateUserCompany(userCompanyId, companyVerticalId, userId, isDeleted) {\n      try {\n        await this.$apollo.mutate({\n          mutation: UPDATE_USER_COMPANY,\n          variables: {\n            userCompanyId,\n            companyVerticalId,\n            userId,\n            isDeleted,\n          },\n        });\n        // console.log('updateUserCompany', data);\n      } catch (error) {\n        // console.log(error.message);\n      }\n    },\n    async onAccountSelect(companyVerticalRow, event) {\n      try {\n        // console.log(event.target.dataset);\n        // console.log('ID:', event.target.dataset.id);\n        const companyID = parseInt(event.target.value, 10);\n        let { data } = await this.$apollo.query({\n          query: GETALL_VERTICALS_FROM_COMPANY,\n          variables: {\n            id: companyID,\n          },\n        });\n        // console.log(`darta : is : ${JSON.stringify(data)}`);\n        data = data.getVerticalByCompany;\n        [data] = data;\n        // console.log(`data is: ${JSON.stringify(data)}`);\n        // console.log(data.getVerticalByCompany);\n        companyVerticalRow.selectedVertical = data.name;\n        companyVerticalRow.companyId = companyID;\n        // companyVerticalRow.selectedVertical = data.getVerticalByCompany.name;\n\n        // console.log('TCL: onAccountSelect -> this.verticalData', this.verticalData);\n      } catch (error) {\n        // console.log('vertical error -> ', error);\n      }\n      // this.verticalData = this.accountData.filter(ad  => ad.companyId === this.selectedAccount.companyId);\n    },\n    async onUserRoleChanged() {\n      try {\n        const { data } = await this.$apollo.query({ query: FETCH_ALL_COMPANIES });\n        this.accountData = data.fetchAllCompanies;\n        // console.log(\"Fetch ALL Companies : \"+ JSON.stringify(data.fetchAllCompanies));\n      } catch (error) {\n        this.$store.dispatch('addToastNotifications', {\n          text: error.message,\n          timer: 4000,\n          type: 'error',\n        });\n      }\n      return this.accountData;\n    },\n    async getAllVerticalByCompany(companyId) {\n      try {\n        await this.$apollo.query({\n          query: GET_VERTICALS_FOR_COMPANY,\n          variables: {\n            companyId,\n          },\n        });\n        // console.log(`data is: ${data}`);\n        // this.accountData = data.fetchAllCompanies;\n      } catch (error) {\n        this.$store.dispatch('addToastNotifications', {\n          text: error.message,\n          timer: 4000,\n          type: 'error',\n        });\n      }\n    },\n    checkUserInput(fn, ln, ohrid) {\n      const hasNumber = /\\d/;\n      if (ohrid.length < 7 || ohrid.length > 9) {\n        this.validationErrors.push('OHRID length should be between 7 - 9!');\n      }\n      if (fn === '') {\n        this.validationErrors.push('First Name is Required!');\n      }\n      if (ln === '') {\n        this.validationErrors.push('Last Name is Required!');\n      }\n      if (hasNumber.test(fn)) {\n        this.validationErrors.push('Enter valid characters in first name!');\n      }\n      if (hasNumber.test(ln)) {\n        this.validationErrors.push('Enter valid characters in last name!');\n      }\n    },\n    async saveUser() {\n      const { userFirstName, userLastName, userOhrid } = this;\n      this.checkUserInput(userFirstName, userLastName, userOhrid);\n      if (this.validationErrors.length > 0) {\n        this.validationErrors.forEach((err) => {\n          this.$store.dispatch('addToastNotifications', {\n            text: err,\n            timer: 4000,\n            type: 'error',\n          });\n        });\n        this.validationErrors = [];\n        return;\n      }\n      const companyId = this.selectedAccount.id;\n      const verticalId = this.selectedVertical.id;\n      const variable = {\n        firstName: userFirstName,\n        lastName: userLastName,\n        ohrid: parseInt(userOhrid, 10),\n        isVOC: 0,\n        isVOD: 0,\n        isReviewer: 0,\n        isAdmin: 0,\n        companyId,\n        verticalId,\n      };\n      if (this.adminRole) {\n        variable.isAdmin = 1;\n      }\n      if (this.userRole === 'voc') {\n        variable.isVOC = 1;\n      } else if (this.userRole === 'vod') {\n        variable.isVOD = 1;\n      } else {\n        // variable.isAdmin = 1;\n        variable.companyId = 0;\n        variable.verticalId = 0;\n      }\n\n      try {\n        const result = await this.$apollo.mutate({\n          mutation: ADD_USER,\n          variables: variable,\n        });\n        if (!result.data.addUser) {\n          throw new Error(`User with OHRID ${userOhrid} already exists`);\n        }\n        this.$store.dispatch('addToastNotifications', {\n          text: 'User added succesfully!',\n          timer: 4000,\n          type: 'success',\n        });\n\n        this.$router.go(-1);\n      } catch (error) {\n        this.$store.dispatch('addToastNotifications', {\n          text: `${error.message}`,\n          timer: 4000,\n          type: 'error',\n        });\n      }\n    },\n    async DeleteUser() {\n      // console.log(this.companyId);\n      // console.log('function called !! ');\n\n      try {\n        const variable = {\n          userId: 0,\n          isHidden: 1,\n        };\n\n        // variable.isHidden = this.isHidden;\n        const usernewId = this.$route.params.userId;\n        variable.userId = parseInt(usernewId, 10);\n\n        await this.$apollo.mutate({\n          mutation: UPDATE_USER_STATE,\n          variables: variable,\n        });\n        // console.log('updateUser', data);\n        this.$store.dispatch('addToastNotifications', {\n          text: 'User Updated Successfully !',\n          timer: 4000,\n          type: 'success',\n        });\n\n        this.enableActivateButton = true;\n        this.modalDisableUser = false;\n      } catch (error) {\n        this.$store.dispatch('addToastNotifications', {\n          text: error.message,\n          timer: 4000,\n          type: 'error',\n        });\n      }\n    },\n    async ActivateUser() {\n      try {\n        const variable = {\n          userId: 0,\n          isHidden: 0,\n        };\n\n        // variable.isHidden = this.isHidden;\n        const usernewId = this.$route.params.userId;\n        variable.userId = parseInt(usernewId, 10);\n\n        await this.$apollo.mutate({\n          mutation: UPDATE_USER_STATE,\n          variables: variable,\n        });\n        // console.log('updateUser', data);\n        this.$store.dispatch('addToastNotifications', {\n          text: 'User Activated Successfully !',\n          timer: 4000,\n          type: 'success',\n        });\n\n        this.enableActivateButton = false;\n        this.modalActivateUser = false;\n      } catch (error) {\n        // console.log(error.message);\n        this.$store.dispatch('addToastNotifications', {\n          text: error.message,\n          timer: 4000,\n          type: 'error',\n        });\n      }\n    },\n\n    async getUserDetails() {\n      const {\n        isEditMode,\n      } = this.$route.query;\n      const usernewId = this.$route.params.userId;\n      // console.log(\"User Added Id \"+ usernewId);\n\n      const { data } = await this.$apollo.query({\n        query: FETCH_USER_DETAIL,\n        variables: {\n          id: parseInt(usernewId, 10),\n        },\n      });\n\n      const {\n        firstName, lastName, ohrid, isVOC, isVOD, isAdmin, isHidden,\n      } = data.getUser[0];\n      // console.log(`isVOC value :${isVOC}`);\n      if (isEditMode) {\n        this.isEditMode = isEditMode;\n        if (firstName) {\n          this.userFirstName = firstName;\n        }\n        if (lastName) {\n          this.userLastName = lastName;\n        }\n        if (ohrid) {\n          this.userOhrid = ohrid;\n        }\n        if (usernewId) {\n          this.userId = parseInt(usernewId, 10);\n          // console.log(`userId: ${usernewId}`);\n        }\n        if (isVOC === 1) {\n          // console.log(`isVOC: ${isVOC}`);\n          this.userRole = 'voc';\n          this.currentRoleUser = 'voc';\n        }\n        if (isVOD === 1) {\n          // console.log(`isVOD: ${isVOD}`);\n          this.userRole = 'vod';\n          this.currentRoleUser = 'vod';\n        }\n        // else if (isAdmin) {\n        //    console.log(`isAdmin: ${isAdmin}`);\n        //   this.userRole = 'admin';\n        // }\n\n        if (isAdmin) {\n          // console.log(`isAdmin: ${isAdmin}`);\n          this.adminRole = 1;\n        }\n\n        if (isHidden === 1) {\n          this.enableActivateButton = true;\n        }\n        this.isHidden = isHidden;\n        this.isReadOnly = false;\n      } else {\n        this.isReadOnly = true;\n      }\n      console.log(`is read only is: ${this.isReadOnly}`);\n    },\n    makeCompanyVerticalEditable(companyVerticalRow) {\n      // companyVerticalRow.isEditingCompanyVertical = !companyVerticalRow.isEditingCompanyVertical;\n      if (!companyVerticalRow.isEditingCompanyVertical) {\n        // vert.forEach((element) => {\n\n        // });\n        // console.log(companyVerticalRow);\n        // console.log(`save details to server: ${companyVerticalRow.companyId}`);\n        // console.log(`vertical to server: ${companyVerticalRow.verticalId}`);\n        // this.addUserToCompanyVerticalS(this.userId,companyVerticalRow.companyId);\n        if (companyVerticalRow.selectedAccount && companyVerticalRow.selectedAccount.id && companyVerticalRow.selectedAccount.name) {\n          console.log(`selectedAccount: ${companyVerticalRow.selectedAccount.id},  name:  ${companyVerticalRow.selectedAccount.name}`);\n        }\n        if (companyVerticalRow.selectedVertical && companyVerticalRow.selectedVertical.id && companyVerticalRow.selectedVertical.name) {\n          console.log(`selected vertical: ${companyVerticalRow.selectedVertical.id},   name:  ${companyVerticalRow.selectedVertical.name}`);\n        }\n        if (companyVerticalRow.selectedVertical.id && companyVerticalRow.selectedAccount.id) {\n          console.log(`user is: ${this.userId} type: ${typeof (this.userId)}`);\n          this.addUserToCompanyVertical(this.userId, companyVerticalRow.selectedAccount.id, companyVerticalRow.selectedVertical.id);\n          // console.log(\"first function !! \");\n        }\n      } else {\n        // console.log(\"second function !! \");\n        this.enableAddCompanyButton = !this.enableAddCompanyButton;\n        // console.log(\"Status : \"+ this.enableAddCompanyButton);\n        this.addUserToCompanyVerticalS(this.userId, companyVerticalRow.companyId);\n      }\n    },\n    async softDeleteUserCompany(index) {\n      const id = parseInt(this.$route.params.userId, 10);\n      const companyVertical = this.editableCompanyVerticals[index].id;\n      console.log(this.editableCompanyVerticals[index].id);\n      const { data } = await this.$apollo.query({\n        query: GET_VOC_VOD_COMPANY,\n        variables: {\n          id, companyVertical,\n        },\n      });\n\n      console.log(data.fetchCompanyVocAndVodFromCompVertical);\n\n      let errorCheck = false;\n\n      if (this.currentRoleUser === 'voc') {\n        //  console.log(\"call voc\");\n        //  console.log(parseInt( data.fetchCompanyVocAndVod[i].voc , 10 ));\n        if (parseInt(data.fetchCompanyVocAndVodFromCompVertical[0].voc, 10) <= 1) {\n          this.popupRole = 'You are not allowed to disable this Company ';\n          this.popupText = `As you were last aligned As ${this.currentRoleUser} with company  ' ${data.fetchCompanyVocAndVodFromCompVertical[0].name} '`;\n          this.popupUserActionDisable = true;\n          errorCheck = true;\n          return;\n        }\n      } else if (parseInt(data.fetchCompanyVocAndVodFromCompVertical[0].vod, 10) <= 1) {\n        this.popupRole = 'You are not allowed to disable this Company ';\n        this.popupText = `As you were last aligned As ${this.currentRoleUser} with company  ' ${data.fetchCompanyVocAndVodFromCompVertical[0].name} '`;\n\n        this.popupUserActionDisable = true;\n        errorCheck = true;\n        return;\n      }\n\n      if (errorCheck === false) {\n        // this.modalDisableUser = true;\n        // return;\n      }\n      if (this.editableCompanyVerticals) {\n        if (this.editableCompanyVerticals[index] && this.editableCompanyVerticals[index].softDeleteRequired) {\n          // delete entry from server\n          this.hiddenUserCompany(this.editableCompanyVerticals[index].id, this.userId, 1);\n          console.log('TCL: softDeleteUserCompany -> index', index);\n          // console.log(`id to be deleted from server ${this.editableCompanyVerticals[index].id}`);\n        }\n        this.editableCompanyVerticals[index].userCompanyStatus = 1;\n        console.log('TCL: softDeleteUserCompany -> this.editableCompanyVerticals[index]', this.editableCompanyVerticals[index]);\n        // delete entry from ui\n        // this.editableCompanyVerticals.splice(index, 1);\n      }\n    },\n    ActivateUserCompany(index) {\n      if (this.editableCompanyVerticals) {\n        if (this.editableCompanyVerticals[index] && this.editableCompanyVerticals[index].softDeleteRequired) {\n          // delete entry from server\n          this.enableUserCompany(this.editableCompanyVerticals[index].id, this.userId, 0);\n          console.log('TCL: softDeleteUserCompany -> index', index);\n          // console.log(`id to be deleted from server ${this.editableCompanyVerticals[index].id}`);\n        }\n        this.editableCompanyVerticals[index].userCompanyStatus = 0;\n        console.log('TCL: softDeleteUserCompany -> this.editableCompanyVerticals[index]', this.editableCompanyVerticals[index]);\n        // delete entry from ui\n        // this.editableCompanyVerticals.splice(index, 1);\n      }\n    },\n    addNewRowForCompanyVertical() {\n      const newRow = {\n        id: '',\n        companyId: '',\n        verticalId: '',\n        isEditingCompanyVertical: true,\n        selectedAccount: '',\n        selectedVertical: '',\n        softDeleteRequired: false,\n        userCompanyStatus: '',\n      };\n      this.editableCompanyVerticals.push(newRow);\n    },\n    addNewRowForCompanyVerticalValues(id, companyId, verticalId, selectedAccount, selectedVertical, isHidden, userCompanyStatus) {\n      const newRow = {\n        id,\n        companyId,\n        verticalId,\n        isEditingCompanyVertical: false,\n        selectedAccount,\n        selectedVertical,\n        softDeleteRequired: true,\n        isHidden,\n        userCompanyStatus,\n      };\n      // console.log(newRow);\n      this.editableCompanyVerticals.push(newRow);\n    },\n    async getUserCompanyVerticals() {\n      this.editableCompanyVerticals = [];\n      // console.log('getUserCompanyVerticals =>');\n      // console.log(`Vertical User ${this.$route.params.userId}`);\n      try {\n        const { data } = await this.$apollo.query({\n          query: GET_USER_COMAPNY_VERTICALS,\n          variables: {\n            id: parseInt(this.$route.params.userId, 10),\n          },\n        });\n        // console.log(`inside user company: ${data.publicUserCompanyList.length}`);\n        if (data.publicUserCompanyList && data.publicUserCompanyList.length > 0) {\n          // delete first empty row of companyVertical\n          this.publicUserCompanyList = data.publicUserCompanyList;\n          this.editableCompanyVerticals.splice(0, 1);\n          data.publicUserCompanyList.forEach((element) => {\n            // console.log(element);\n            const compID = element.companyId;\n            const vertID = element.verticalId;\n            const compVertID = element.companyVerticalId;\n            const isHidden = element.isHidden;\n            const selectedAccount = element.companyId;\n            const userCompanyStatus = element.isUserCompany;\n            // .log(\"selected Row :\"+ JSON.stringify(element) );\n            const selectedVertical = element.vertical;\n            this.addNewRowForCompanyVerticalValues(compVertID, compID, vertID, selectedAccount, selectedVertical, isHidden, userCompanyStatus);\n          });\n        }\n      } catch (error) {\n        // console.log(`getUserCompanyVerticals => error is: ${error}`);\n      }\n    },\n    // async deleteUserRecord(companyVerticalId, userId) {\n    //   // console.log(`companyvertical id is: ${companyVerticalId} with type ${typeof (companyVerticalId)} and ${userId} with type ${typeof (userId)}`);\n    //   try {\n    //     const { data } = await this.$apollo.query({\n    //       query: GET_USER_COMAPNY_VERTICALS,\n    //       variables: {\n    //         companyVerticalId: parseInt(this.companyVerticalId, 10),\n    //         userId: parseInt(this.userId, 10),\n    //       },\n    //     });\n    //     if (data.publicUserCompanyList && data.publicUserCompanyList.length > 0) {\n    //       // delete first empty row of companyVertical\n    //       this.editableCompanyVerticals.splice(0, 1);\n    //       data.publicUserCompanyList.forEach((element) => {\n    //         const compID = element.companyId;\n    //         const vertID = element.verticalId;\n    //         const compVertID = element.companyVerticalId;\n    //         const selectedAccount = element.company;\n    //         const selectedVertical = element.vertical;\n    //         this.addNewRowForCompanyVerticalValues(compVertID, compID, vertID, selectedAccount, selectedVertical);\n    //       });\n    //     }\n    //   } catch (error) {\n    //     // console.log(`getUserCompanyVerticals => error is: ${error}`);\n    //   }\n    // },\n\n    async getAllCompanyVerticals() {\n      try {\n        // console.log('getAllCompanyVerticals =>:');\n        const { data } = await this.$apollo.query({\n          query: GET_ALL_COMPANY_VERTICALS,\n        });\n        // console.log(`getAllCompanyVerticals => all user company: ${data.length}`);\n        if (data.publicUserCompanyVerticalList && data.publicUserCompanyVerticalList.length > 0) {\n          // delete first empty row of companyVertical\n          // console.log(`getAllCompanyVerticals => length:  ${data.publicUserCompanyVerticalList.length}`);\n        }\n      } catch (error) {\n        // console.log(`getAllCompanyVerticals => error is: ${error}`);\n      }\n    },\n    async getCompanyVerticalByCompanyName(companyName) {\n      if (this.publicUserCompanyList && this.publicUserCompanyList.length > 0 && companyName) {\n        // const result = this.publicUserCompanyList.find((o) => { o.name === companyName; });\n        // return result;\n      }\n      return null;\n    },\n  },\n};\n</script>\n<style scoped>\n.userCard{\nbox-shadow: 0px 4px 7px 0px grey;\n}\n     .bounce-enter-active {\n        animation: bounce-in .7s;\n      }\n      .bounce-leave-active {\n        animation: bounce-in .6s reverse;\n      }\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n</style>\n"]}