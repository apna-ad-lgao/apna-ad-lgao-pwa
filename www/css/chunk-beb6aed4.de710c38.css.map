{"version":3,"sources":["webpack:///src/views/mobile/dashboard-pages/analytics-dashboard.vue","webpack:///src/views/mobile/dashboard-pages/src/views/mobile/dashboard-pages/analytics-dashboard.vue"],"names":[],"mappings":"AAswDA,iCACE,yBAA2B,CCK7B,oBACA,sBACA,CACA,MACA,YACA,CAEA,aACA,YAAA,CACA,eAAA,CACA,eACA,CACA,QACA,kBACA","file":"chunk-beb6aed4.de710c38.css","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// .feedback-row {\n//   position: relative;\n//   &:before {\n//     position: absolute;\n//     height: 97%;\n//     content: '';\n//     left: -10px;\n//     width: 3px;\n//     border-radius: 4px;\n//     top: 50%;\n//     transform: translateY(-50%);\n//     opacity: 0.8;\n//   }\n\n//   &.voc-row:before {\n//     background: #FF545E;\n//   }\n\n//   &.vod-row:before {\n//     background: #00ADCF;\n//   }\n// }\n.overflowScroll {\n  overflow: scroll !important;\n}\n","<template>\n  <section class=\"dashboard-task-feedback-page bg-white h-min-screen\">\n    <button\n      class=\"goTop transition-slow block fixed h-10 opacity-0 outline-none rounded-full\n      w-10 focus:outline-none border border-solid border-gray-700 bg-white right-0 bottom-0\n      mr-3 mb-3 z-10\"\n      :class=\"showBtn ? 'opacity-100 ':'opacity-0'\"\n      @click=\"topFunction()\"\n    >\n      <i aria-hidden=\"true\" class=\"fa fa-angle-up text-gray-700 text-2xl\" />\n    </button>\n    <img class=\"mb-4 mt-12 w-full\" src=\"/img/backgrounds/pulse_dashboard.png\" alt=\"Pulse Dashboard\">\n    <div class=\"flex font-bold font-dark-grey font-sans h-8 text-center text-sm cursor-pointer\">\n      <p\n        class=\"w-1/2 outline-none border-red-500 ml-2 rounded-sm\"\n        :class=\"{ 'border-b-2': activeTab === 'vertical' }\"\n        @click=\"activeTab = 'vertical'\"\n      >\n        Verticals\n      </p>\n      <p\n        class=\"w-1/2 outline-none border-red-500 mr-2 rounded-sm\"\n        :class=\"{ 'border-b-2': activeTab === 'account' }\"\n        @click=\"activeTab = 'account'\"\n      >\n        Accounts\n      </p>\n    </div>\n    <section v-show=\"activeTab === 'vertical'\" class=\"mt-12\">\n      <div>\n        <h2\n          class=\"font-bold font-normal italic m-0 py-2 text-genpact-blue text-center text-xl tracking-wide\"\n        >\n          Overall account health across verticals\n        </h2>\n      </div>\n      <div class=\"mx-auto my-2 relative w-2/3\">\n        <select\n          v-model=\"selectedHealthFilter\"\n          class=\"block appearance-none w-full bg-gray-100 border border-gray-400\n          hover:border-gray-500 px-4 py-1 pr-8 rounded leading-tight focus:outline-none\n          text-sm font-bold\"\n          @change=\"loadGraphOnChange('healthGraph')\"\n        >\n          <option\n            v-for=\"chartOption in chartOptions\"\n            :key=\"chartOption.key\"\n            class=\"text-black\"\n            :value=\"chartOption.key\"\n          >\n            {{ chartOption.value }}\n          </option>\n        </select>\n        <div\n          class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 font-black\"\n        >\n          <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n            <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n          </svg>\n        </div>\n      </div>\n      <div class=\"w-full flex h-auto\">\n        <div style=\"height:344px;\" class=\"flex flex-col items-center justify-between\" />\n        <div style=\"width:100%\" class=\"flex justify-center\">\n          <highcharts :options=\"healthChart\" class=\"container overflowScroll py-2\" />\n        </div>\n      </div>\n      <div class=\"p-4 flex items-center text-genpact-pink\">\n        <!-- *red accounts - rating less than or equal to 3 -->\n      </div>\n    </section>\n    <section v-show=\"activeTab === 'vertical'\">\n      <div class=\"mt-4\">\n        <h2\n          class=\"font-bold font-normal italic m-0 py-2 text-genpact-blue text-center text-xl tracking-wide\"\n        >\n          Vertical wise - Average rating\n        </h2>\n      </div>\n      <div class=\"mx-auto my-2 relative w-2/3\">\n        <select\n          v-model=\"selectedPivotGraphFilter\"\n          class=\"block appearance-none w-full bg-gray-100 border border-gray-400\n          hover:border-gray-500 px-4 py-1 pr-8 rounded leading-tight focus:outline-none\n          text-sm font-bold\"\n          @change=\"loadGraphOnChange('pivotGraph')\"\n        >\n          <option\n            v-for=\"chartOption in chartOptions\"\n            :key=\"chartOption.key\"\n            class=\"text-black\"\n            :value=\"chartOption.key\"\n          >\n            {{ chartOption.value }}\n          </option>\n        </select>\n        <div\n          class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 font-black\"\n        >\n          <svg class=\"fill-current h-4 w-4\" viewBox=\"0 0 20 20\">\n            <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n          </svg>\n        </div>\n      </div>\n      <div class=\"w-full flex h-auto\">\n        <div style=\"width:100%\" class=\"flex justify-center\">\n          <highcharts :options=\"pivotChart\" class=\"container overflowScroll py-2\" />\n        </div>\n      </div>\n    </section>\n    <!-- <section v-show=\"activeTab === 'account'\" class=\"mt-4\">\n      <div>\n        <h2 class=\"font-bold font-normal italic m-0 py-2 text-genpact-blue text-center text-xl tracking-wide\">\n          Bottom Accounts (average rating less than or equal to 3)\n        </h2>\n      </div>\n      <div class=\"mx-auto my-2 relative w-2/3\">\n        <select\n          v-model=\"selectedAvgFilter\"\n          class=\"block\n              appearance-none\n              w-full\n              bg-gray-100\n              border\n              border-gray-400\n              hover:border-gray-500\n              px-4\n              py-2\n              pr-8\n              rounded\n              leading-tight\n              focus:outline-none\n              text-sm\n              font-bold\"\n          @change=\"loadGraphOnChange('avgGraph')\"\n        >\n          <option v-for=\"chartOption in chartOptions\" :key=\"chartOption.key\" class=\"text-black\" :value=\"chartOption.key\">\n            {{ chartOption.value }}\n          </option>\n        </select>\n        <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 font-black\">\n          <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" /></svg>\n        </div>\n      </div>\n      <div class=\"w-full flex h-auto\">\n        <div style=\"width:100%\">\n          <highcharts :options=\"averageChart\" class=\"container overflowScroll py-2\" />\n        </div>\n      </div>\n    </section>-->\n    <section v-show=\"activeTab === 'account'\" class=\"mt-4\">\n      <div>\n        <h2\n          class=\"font-bold font-normal italic m-0 py-2 text-genpact-blue text-center text-xl tracking-wide\"\n        >\n          Issue Bifurcation - Red Accounts\n        </h2>\n      </div>\n      <div class=\"mx-auto my-2 relative w-2/3\">\n        <select\n          v-model=\"selectedCategoryWiseFilter\"\n          class=\"block appearance-none w-full bg-gray-100 border border-gray-400\n          hover:border-gray-500 px-4 py-1 pr-8 rounded leading-tight focus:outline-none\n          text-sm font-bold\"\n          @change=\"loadGraphOnChange('categoryGraph')\"\n        >\n          <option\n            v-for=\"chartOption in chartOptions\"\n            :key=\"chartOption.key\"\n            class=\"text-black\"\n            :value=\"chartOption.key\"\n          >\n            {{ chartOption.value }}\n          </option>\n        </select>\n        <div\n          class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 font-black\"\n        >\n          <svg class=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n            <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n          </svg>\n        </div>\n      </div>\n      <div class=\"w-full flex h-auto\">\n        <div style=\"width:100%\" class=\"flex justify-center\">\n          <highcharts :options=\"categoryChart\" class=\"container overflowScroll py-2\" />\n        </div>\n      </div>\n    </section>\n    <section v-show=\"activeTab === 'vertical'\" id=\"account\" class=\"m-4\">\n      <div>\n        <h2\n          class=\"font-bold font-normal italic m-0 py-2 text-genpact-blue text-center text-xl tracking-wide\"\n        >\n          Vertical wise – Bottom 5 Accounts\n        </h2>\n      </div>\n      <div class=\"mx-auto my-2 relative w-2/3\">\n        <select\n          v-model=\"selectedBottomVerticalGraph\"\n          class=\"block appearance-none w-full bg-gray-100 border border-gray-400\n          hover:border-gray-500 px-4 py-1 pr-8 rounded leading-tight focus:outline-none\n          text-sm font-bold\"\n          @change=\"loadGraphOnChange('bottomVerticalGraph')\"\n        >\n          <option\n            v-for=\"chartOption in chartOptions\"\n            :key=\"chartOption.key\"\n            class=\"text-black\"\n            :value=\"chartOption.key\"\n          >\n            {{ chartOption.value }}\n          </option>\n        </select>\n        <div\n          class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 font-black\"\n        >\n          <svg class=\"fill-current h-4 w-4\" viewBox=\"0 0 20 20\">\n            <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n          </svg>\n        </div>\n      </div>\n      <div class=\"w-full flex border border-gray-400 pb-24 my-3 px-1\">\n        <div style=\"width:100%; height:320px;\">\n          <highcharts :options=\"bottomBCMVerticalChart\" class=\"container overflowScroll py-2\" />\n        </div>\n      </div>\n      <div class=\"w-full flex border border-gray-400 pb-24 my-3 px-1\">\n        <div style=\"width:100%; height:320px\">\n          <highcharts :options=\"bottomCGRLHVerticalChart\" class=\"container overflowScroll py-2\" />\n        </div>\n      </div>\n      <div class=\"w-full flex border border-gray-400 pb-24 my-3 px-1\">\n        <div style=\"width:100%; height:320px\">\n          <highcharts\n            :options=\"bottomInsuranceVerticalChart\"\n            class=\"container overflowScroll py-2\"\n          />\n        </div>\n      </div>\n      <div class=\"w-full flex border border-gray-400 pb-24 my-3 px-1\">\n        <div style=\"width:100%; height:320px\">\n          <highcharts :options=\"bottomHMSVerticalChart\" class=\"container overflowScroll py-2\" />\n        </div>\n      </div>\n    </section>\n    <!-- <section class=\"m-4\">\n        <div>\n          <h2 class=\"font-bold font-normal italic m-0 py-2 text-genpact-blue text-center text-xl tracking-wide\">\n            Variation of VOD and VOC\n          </h2>\n        </div>\n        <div>\n          <button\n            class=\"bg-green-500 border-2 border-green-500 rounded text-white w-full\"\n            @click=\"downloadReport\"\n          >\n            Click here for download\n          </button>\n        </div>\n      </section>\n    </div>\n    <section>-->\n    <div v-show=\"activeTab === 'account'\" class=\"mt-10\">\n      <h2\n        class=\"font-bold font-normal italic m-0 py-2 text-genpact-pink text-center text-xl tracking-wide\"\n      >\n        Rating Variation of VOD and VOS\n      </h2>\n    </div>\n    <div\n      v-show=\"activeTab === 'account'\"\n      class=\"overflox-x-scroll overflow-y-hidden mx-1 mb-5 border border-dark-gray-600\"\n    >\n      <table class=\"table-auto text-center md:text-sm text-xs w-full\">\n        <thead>\n          <tr class=\"bg-gray-100\">\n            <th class=\"border text-sm md:text-base lg:py-1 py-px\">\n              Vertical\n            </th>\n            <th class=\"border text-sm md:text-base lg:py-1 py-px\">\n              Company\n            </th>\n            <th class=\"border text-sm md:text-base lg:py-1 py-px\">\n              Voice Of Sales\n            </th>\n            <th class=\"border text-sm md:text-base lg:py-1 py-px\">\n              Voice Of Delivery\n            </th>\n          </tr>\n        </thead>\n        <tbody v-for=\"(data, index) in tableData\" :key=\"index\">\n          <tr\n            v-if=\"(data.verticalName==='BCM') && (data.voc - data.vod >= 2 || data.vod - data.voc >= 2)\"\n          >\n            <td class=\"border px-1 py-2\" style=\"background:#fcfcfc\">\n              {{ data.verticalName }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.companyName }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.voc }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.vod }}\n            </td>\n          </tr>\n          <!-- <template v-if=\"data.verticalName==='BCM'\">\n                        <tr>\n                        </tr>\n          </template>-->\n          <tr\n            v-if=\"data.verticalName==='CGRLH' && (data.voc - data.vod >= 2 || data.vod - data.voc >= 2)\"\n          >\n            <td class=\"border px-1 py-2\" style=\"background:#e1e1e1\">\n              {{ data.verticalName }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.companyName }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.voc }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.vod }}\n            </td>\n          </tr>\n          <!-- <template v-if=\"data.Vertical==='CGRLH'\">\n                        <tr v-for=\"(newData, indexx) in data.companyData\" v-bind:key=\"indexx\">\n                           <td class=\"border lg:py-1 py-px\">{{newData.Company}}</td>\n                           <td class=\"border lg:py-1 py-px\">{{newData.VoiceOfSales}}</td>\n                           <td class=\"border lg:py-1 py-px\">{{newData.VoiceOfDelivery}}</td>\n                        </tr>\n          </template>-->\n          <tr\n            v-if=\"data.verticalName==='HMS' && (data.voc - data.vod >= 2 || data.vod - data.voc >= 2)\"\n          >\n            <td class=\"border px-1 py-2\" style=\"background:#fcfcfc\">\n              {{ data.verticalName }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.companyName }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.voc }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.vod }}\n            </td>\n          </tr>\n          <!-- <template v-if=\"data.Vertical==='HMS'\">\n                        <tr v-for=\"(newData, indexx) in data.companyData\" v-bind:key=\"indexx\">\n                           <td class=\"border lg:py-1 py-px\">{{newData.Company}}</td>\n                           <td class=\"border lg:py-1 py-px\">{{newData.VoiceOfSales}}</td>\n                           <td class=\"border lg:py-1 py-px\">{{newData.VoiceOfDelivery}}</td>\n                        </tr>\n          </template>-->\n          <tr\n            v-if=\"data.verticalName==='Insurance' && (data.voc - data.vod >= 2 || data.vod - data.voc >= 2)\"\n          >\n            <td class=\"border px-1 py-2\" style=\"background:#e1e1e1\">\n              {{ data.verticalName }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.companyName }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.voc }}\n            </td>\n            <td class=\"border lg:py-1 py-px\">\n              {{ data.vod }}\n            </td>\n          </tr>\n          <!-- <template v-if=\"data.Vertical==='Insurance'\">\n                        <tr v-for=\"(newData, indexx) in data.companyData\" v-bind:key=\"indexx\">\n                           <td class=\"border lg:py-1 py-px\">{{newData.Company}}</td>\n                           <td class=\"border lg:py-1 py-px\">{{newData.VoiceOfSales}}</td>\n                           <td class=\"border lg:py-1 py-px\">{{newData.VoiceOfDelivery}}</td>\n                        </tr>\n          </template>-->\n        </tbody>\n      </table>\n    </div>\n  </section>\n</template>\n\n<script>\nimport { Chart } from 'highcharts-vue';\nimport Axios from 'axios';\nimport BottomAvg from '../../../graphql/BottomAverage.gql';\nimport RootCauseVariations from '../../../graphql/RootCauseVariations.gql';\nimport OverallHealth from '../../../graphql/OverallHealth.gql';\nimport CategoryWise from '../../../graphql/CategoryWise.gql';\nimport PivotGraph from '../../../graphql/PivotGraph.gql';\nimport TableAvgRating from '../../../graphql/TableAvgRating.gql';\n// import VerticalWiseBottomAccounts from '../../../graphql/verticalWiseBottomAccounts.gql';\n// import categoryChart from './categoryChartData.js';\nimport tableChart from './tableChartData';\n\nexport default {\n  name: 'Analytics',\n  components: {\n    highcharts: Chart,\n  },\n  data() {\n    return {\n      activeTab: 'vertical',\n      showBtn: false,\n      avg: [],\n      tableChart,\n      bottomAvgAccounts: {\n        bcm: [],\n        bcmAvg: 0,\n        cgrlh: [],\n        cgrlhAvg: 0,\n        insurance: [],\n        insuranceAvg: 0,\n        hms: [],\n        hmsAvg: 0,\n      },\n      bottomAvgAccountBCM: {\n        bcm: [],\n        avg: [],\n      },\n      bottomAvgAccountCGRLH: {\n        cgrlh: [],\n        avg: [],\n      },\n      bottomVerticalChartInsurance: {\n        insurance: [],\n        avg: [],\n      },\n      bottomAvgAccountHMS: {\n        hms: [],\n        avg: [],\n      },\n      overallHealthWidth: 0,\n      overallHealth: [],\n      categoriesWise: [],\n      pivotOverallRating: [],\n      tableData: [],\n      averageChart: {\n        chart: {\n          type: 'bar',\n          height: parseInt(30 * 21, 10),\n        },\n        title: {\n          text: '',\n        },\n        subtitle: {\n          text: '',\n        },\n        xAxis: {\n          categories: [],\n          type: 'category',\n          labels: {\n            rotation: -20,\n            style: {\n              fontSize: '9px',\n              fontWeight: 300,\n              fontFamily: 'Verdana, sans-serif',\n            },\n          },\n        },\n        legend: {\n          enabled: false,\n          itemMarginTop: 5,\n          itemStyle: {\n            fontSize: '10px',\n          },\n        },\n        tooltip: {\n          pointFormat: 'Avg scores for the last 4 weeks: <b>{point.y:.2f}</b>',\n          enabled: false,\n        },\n        colors: ['#4472C4'],\n        plotOptions: {\n          bar: {\n            pointPadding: 0.3,\n            groupPadding: 0.05,\n          },\n          events: {\n            legendItemClick() {\n              return false;\n            },\n            mouseOver() {\n              return false;\n            },\n            mouseOut() {\n              return false;\n            },\n            show() {\n              return false;\n            },\n          },\n        },\n        series: [\n          {\n            name: 'Average',\n            data: [],\n            dataLabels: {\n              enabled: true,\n              rotation: 0,\n              color: '#000000',\n              align: 'left',\n              format: '{point.y:.1f}', // one decimal\n              x: 10,\n              style: {\n                fontWeight: '500',\n                fontSize: '10px',\n                fontFamily: 'Verdana, sans-serif',\n              },\n            },\n          },\n        ],\n        scrollbar: {\n          enabled: true,\n        },\n      },\n      healthChart: {\n        chart: {\n          type: 'bar',\n          height: parseInt(30 * 15, 10),\n        },\n        title: {\n          text: '',\n        },\n        subtitle: {\n          text: '',\n        },\n        xAxis: {\n          categories: [],\n          crosshair: true,\n          labels: {\n            style: {\n              fontSize: '10px',\n              rotate: 45,\n              fontWeight: 500,\n            },\n          },\n        },\n        yAxis: {\n          min: 0,\n          max: 100,\n          title: {\n            text: '',\n          },\n        },\n        tooltip: {\n          headerFormat:\n            '<span style=\"font-size:10px;font-weight:700\">{point.key}</span><table>',\n          pointFormat:\n            '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>'\n            + '<td style=\"padding:0\"><b>{point.y:.2f}</b></td></tr>',\n          footerFormat: '</table>',\n          shared: true,\n          useHTML: true,\n          enabled: false,\n        },\n        legend: {\n          align: 'center',\n          verticalAlign: 'top',\n          layout: 'horizontal',\n          x: 0,\n          y: 20,\n          itemMarginTop: 5,\n          itemStyle: {\n            fontSize: '10px',\n          },\n          // itemMarginBottom: 5,\n        },\n        plotOptions: {\n          bar: {\n            pointWidth: 9,\n            groupPadding: 0.07,\n            borderWidth: 0,\n            // stacking: 'normal',\n            dataLabels: {\n              enabled: true,\n              color: '#000000',\n              align: 'center',\n              format: '{point.y:.0f}%', // one decimal\n              y: 0, // 10 pixels down from the top\n              x: 20,\n              style: {\n                fontWeight: '400',\n                fontSize: '10px',\n              },\n            },\n            events: {\n              legendItemClick() {\n                return false;\n              },\n              mouseOver() {\n                return false;\n              },\n              mouseOut() {\n                return false;\n              },\n              show() {\n                return false;\n              },\n            },\n          },\n          allowPointSelect: false,\n        },\n        colors: [\n          '#ff7d83',\n          '#eb2f45',\n          '#b6e6ed',\n          '#0f548c',\n        ],\n        groupPadding: 1,\n        series: [],\n      },\n      pivotChart: {\n        chart: {\n          type: 'bar',\n          height: parseInt(30 * 12, 10),\n        },\n        title: {\n          text: '',\n        },\n        subtitle: {\n          text: '',\n        },\n        xAxis: {\n          categories: [],\n          crosshair: true,\n          title: false,\n          labels: {\n            style: {\n              fontSize: '10px',\n              rotate: 45,\n              fontWeight: 500,\n            },\n          },\n        },\n        yAxis: {\n          title: false,\n        },\n        tooltip: {\n          enabled: false,\n          // headerFormat: '<span style=\"font-size:10px;font-weight:700\">{point.key}</span><table>',\n          // pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>'\n          //   + '<td style=\"padding:0\"><b>{point.y:.2f}</b></td></tr>',\n          // footerFormat: '</table>',\n          // shared: true,\n          // useHTML: true,\n          // enabled: false,\n        },\n        legend: {\n          align: 'center',\n          verticalAlign: 'top',\n          layout: 'horizontal',\n          x: 0,\n          y: 20,\n          itemMarginTop: 5,\n          itemStyle: {\n            fontSize: '10px',\n          },\n          // itemMarginBottom: 5,\n        },\n        plotOptions: {\n          bar: {\n            pointWidth: 9,\n            groupPadding: 0.07,\n            borderWidth: 0,\n            // stacking: 'normal',\n            dataLabels: {\n              enabled: true,\n              color: '#000000',\n              align: 'center',\n              format: '{point.y:.2f}', // one decimal\n              y: 0, // 10 pixels down from the top\n              x: 20,\n              style: {\n                fontWeight: '400',\n                fontSize: '10px',\n              },\n            },\n            events: {\n              legendItemClick() {\n                return false;\n              },\n              mouseOver() {\n                return false;\n              },\n              mouseOut() {\n                return false;\n              },\n              show() {\n                return false;\n              },\n            },\n          },\n          allowPointSelect: false,\n        },\n        colors: [\n          '#767171',\n          '#6fcddb',\n          '#316c9c',\n        ],\n        groupPadding: 1,\n        series: [],\n      },\n      categoryChart: {\n        chart: {\n          type: 'bar',\n          height: parseInt(30 * 9, 10),\n        },\n        stackLabels: {\n          enabled: true,\n          style: {\n            fontWeight: 'bold',\n          },\n        },\n        title: {\n          text: '',\n        },\n        xAxis: {\n          categories: ['BCM', 'CGRLH', 'HMS', 'Insurance'],\n        },\n        yAxis: {\n          min: 0,\n          max: 100,\n          title: {\n            text: '',\n          },\n        },\n        legend: {\n          verticalAlign: 'top',\n          itemMarginTop: 5,\n          itemStyle: {\n            fontSize: '10px',\n          },\n        },\n        plotOptions: {\n          series: {\n            stacking: 'normal',\n            pointPadding: 0.15,\n            groupPadding: 0.001,\n            dataLabels: {\n              enabled: true,\n              color: 'black',\n              rotation: 0,\n              align: 'center',\n              format: '{point.y:.0f}%', // one decimal\n              y: 0,\n              x: 0, // 10 pixels down from the top\n              style: {\n                // textDecoration: 'none',\n                fontWeight: '300',\n                fontSize: '10px',\n                fontFamily: 'Verdana, sans-serif',\n              },\n            },\n            events: {\n              legendItemClick() {\n                return false;\n              },\n              mouseOver() {\n                return false;\n              },\n              mouseOut() {\n                return false;\n              },\n              show() {\n                return false;\n              },\n            },\n          },\n        },\n        tooltip: {\n          enabled: false,\n        },\n        colors: [\n          '#073262',\n          '#0f548c',\n          '#316c9c',\n          '#00aecf',\n          '#17b5d3',\n          '#434040',\n          '#767171',\n          '#7f7f7f',\n          '#a6a6a6',\n          '#bfbfbf',\n          '#e9e9e9',\n        ],\n        series: [],\n      },\n      bottomBCMVerticalChart: {\n        chart: {\n          type: 'column',\n          // height: parseInt((30 * (21)), 10),\n        },\n        title: {\n          text: 'BCM',\n        },\n        subtitle: {\n          text: 'Bottom Accounts – Average Rating',\n        },\n        xAxis: {\n          categories: [],\n          type: 'category',\n          labels: {\n            // rotation: -20,\n            style: {\n              fontSize: '9px',\n              fontWeight: 300,\n              fontFamily: 'Verdana, sans-serif',\n            },\n          },\n        },\n        yAxis: {\n          title: {\n            text: 'Rating',\n          },\n        },\n        legend: {\n          enabled: false,\n          itemMarginTop: 5,\n          itemStyle: {\n            fontSize: '10px',\n          },\n        },\n        tooltip: {\n          pointFormat: 'Avg scores for the last 4 weeks: <b>{point.y:.2f}</b>',\n          enabled: false,\n        },\n        colors: [\n          '#a6a6a6',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n        ],\n        plotOptions: {\n          bar: {\n            pointPadding: 0.3,\n            groupPadding: 0.05,\n          },\n          column: {\n            colorByPoint: true,\n          },\n          events: {\n            legendItemClick() {\n              return false;\n            },\n            mouseOver() {\n              return false;\n            },\n            mouseOut() {\n              return false;\n            },\n            show() {\n              return false;\n            },\n          },\n        },\n        series: [\n          {\n            name: 'BCM',\n            data: [],\n            dataLabels: {\n              enabled: true,\n              rotation: 0,\n              color: '#000000',\n              align: 'left',\n              format: '{point.y:.2f}', // one decimal\n              x: -5,\n              style: {\n                fontWeight: '500',\n                fontSize: '10px',\n                fontFamily: 'Verdana, sans-serif',\n              },\n            },\n          },\n        ],\n        scrollbar: {\n          enabled: true,\n        },\n      },\n      bottomCGRLHVerticalChart: {\n        chart: {\n          type: 'column',\n          // height: parseInt((30 * (21)), 10),\n        },\n        title: {\n          text: 'CGRLH',\n        },\n        subtitle: {\n          text: 'Bottom Accounts – Average Rating',\n        },\n        xAxis: {\n          categories: [],\n          type: 'category',\n          labels: {\n            // rotation: -20,\n            style: {\n              fontSize: '9px',\n              fontWeight: 300,\n              fontFamily: 'Verdana, sans-serif',\n            },\n          },\n        },\n        yAxis: {\n          title: {\n            text: 'Rating',\n          },\n        },\n        legend: {\n          enabled: false,\n          itemMarginTop: 5,\n          itemStyle: {\n            fontSize: '10px',\n          },\n        },\n        tooltip: {\n          pointFormat: 'Avg scores for the last 4 weeks: <b>{point.y:.2f}</b>',\n          enabled: false,\n        },\n        colors: [\n          '#a6a6a6',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n        ],\n        plotOptions: {\n          bar: {\n            pointPadding: 0.3,\n            groupPadding: 0.05,\n          },\n          column: {\n            colorByPoint: true,\n          },\n          events: {\n            legendItemClick() {\n              return false;\n            },\n            mouseOver() {\n              return false;\n            },\n            mouseOut() {\n              return false;\n            },\n            show() {\n              return false;\n            },\n          },\n        },\n        series: [\n          {\n            name: 'CGRLH',\n            data: [],\n            dataLabels: {\n              enabled: true,\n              rotation: 0,\n              color: '#000000',\n              align: 'left',\n              format: '{point.y:.2f}', // one decimal\n              x: -5,\n              style: {\n                fontWeight: '500',\n                fontSize: '10px',\n                fontFamily: 'Verdana, sans-serif',\n              },\n            },\n          },\n        ],\n        scrollbar: {\n          enabled: true,\n        },\n      },\n      bottomInsuranceVerticalChart: {\n        chart: {\n          type: 'column',\n          // height: parseInt((30 * (21)), 10),\n        },\n        title: {\n          text: 'Insurance',\n        },\n        subtitle: {\n          text: 'Bottom Accounts – Average Rating',\n        },\n        xAxis: {\n          categories: [],\n          type: 'category',\n          labels: {\n            // rotation: -20,\n            style: {\n              fontSize: '9px',\n              fontWeight: 300,\n              fontFamily: 'Verdana, sans-serif',\n            },\n          },\n        },\n        yAxis: {\n          title: {\n            text: 'Rating',\n          },\n        },\n        legend: {\n          enabled: false,\n          itemMarginTop: 5,\n          itemStyle: {\n            fontSize: '10px',\n          },\n        },\n        tooltip: {\n          pointFormat: 'Avg scores for the last 4 weeks: <b>{point.y:.2f}</b>',\n          enabled: false,\n        },\n        colors: [\n          '#a6a6a6',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n        ],\n        plotOptions: {\n          bar: {\n            pointPadding: 0.3,\n            groupPadding: 0.05,\n          },\n          column: {\n            colorByPoint: true,\n          },\n          events: {\n            legendItemClick() {\n              return false;\n            },\n            mouseOver() {\n              return false;\n            },\n            mouseOut() {\n              return false;\n            },\n            show() {\n              return false;\n            },\n          },\n        },\n        series: [\n          {\n            name: 'Insurance',\n            data: [],\n            dataLabels: {\n              enabled: true,\n              rotation: 0,\n              color: '#000000',\n              align: 'left',\n              format: '{point.y:.2f}', // one decimal\n              x: -5,\n              style: {\n                fontWeight: '500',\n                fontSize: '10px',\n                fontFamily: 'Verdana, sans-serif',\n              },\n            },\n          },\n        ],\n        scrollbar: {\n          enabled: true,\n        },\n      },\n      bottomHMSVerticalChart: {\n        chart: {\n          type: 'column',\n          // height: parseInt((30 * (21)), 10),\n        },\n        title: {\n          text: 'HMS',\n        },\n        subtitle: {\n          text: 'Bottom Accounts – Average Rating',\n        },\n        xAxis: {\n          categories: [],\n          type: 'category',\n          labels: {\n            // rotation: -20,\n            style: {\n              fontSize: '9px',\n              fontWeight: 300,\n              fontFamily: 'Verdana, sans-serif',\n            },\n          },\n        },\n        yAxis: {\n          title: {\n            text: 'Rating',\n          },\n        },\n        legend: {\n          enabled: false,\n          itemMarginTop: 5,\n          itemStyle: {\n            fontSize: '10px',\n          },\n        },\n        tooltip: {\n          pointFormat: 'Avg scores for the last 4 weeks: <b>{point.y:.2f}</b>',\n          enabled: false,\n        },\n        colors: [\n          '#a6a6a6',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n          '#6fcddb',\n        ],\n        plotOptions: {\n          bar: {\n            pointPadding: 0.3,\n            groupPadding: 0.05,\n          },\n          column: {\n            colorByPoint: true,\n          },\n          events: {\n            legendItemClick() {\n              return false;\n            },\n            mouseOver() {\n              return false;\n            },\n            mouseOut() {\n              return false;\n            },\n            show() {\n              return false;\n            },\n          },\n        },\n        series: [\n          {\n            name: 'HMS',\n            data: [],\n            dataLabels: {\n              enabled: true,\n              rotation: 0,\n              color: '#000000',\n              align: 'left',\n              format: '{point.y:.2f}', // one decimal\n              x: -5,\n              style: {\n                fontWeight: '500',\n                fontSize: '10px',\n                fontFamily: 'Verdana, sans-serif',\n              },\n            },\n          },\n        ],\n        scrollbar: {\n          enabled: true,\n        },\n      },\n      typeFilter: 'monthly',\n      selectedHealthFilter: 'monthly',\n      selectedAvgFilter: 'monthly',\n      selectedCategoryWiseFilter: 'monthly',\n      selectedPivotGraphFilter: 'monthly',\n      selectedTableAvgFilter: 'monthly',\n      selectedBottomVerticalGraph: 'monthly',\n      chartOptions: [\n        { key: 'monthly', value: 'MONTHLY' },\n        { key: '15day', value: 'Last 15 Days' },\n        { key: '7day', value: 'Last 7 Days' },\n        { key: '5day', value: ' Last 5 Days' },\n      ],\n    };\n  },\n  mounted() {\n    this.loadGraphOnChange('healthGraph');\n    this.loadGraphOnChange('pivotGraph');\n    this.loadGraphOnChange('avgGraph');\n    this.loadGraphOnChange('categoryGraph');\n    this.loadGraphOnChange('bottomVerticalGraph');\n    this.getRootCauseVariationsChanges();\n    this.createTableChart('tableChart', this.tableChart);\n  },\n  beforeMount() {\n    window.addEventListener('scroll', this.scrollFunction);\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.scrollFunction);\n  },\n  methods: {\n    createTableChart() {},\n    scrollFunction() {\n      this.showBtn = window.scrollY > 200;\n    },\n\n    topFunction() {\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    },\n    loadGraphOnChange(graphType) {\n      switch (graphType) {\n        case 'healthGraph':\n          this.overallHealthOnChange();\n          break;\n        case 'pivotGraph':\n          this.pivotGraphOnChange();\n          break;\n        // case 'avgGraph':\n        //   this.avgGraphFilterOnChange();\n        //   break;\n        case 'categoryGraph':\n          this.categoryWiseOnChange();\n          break;\n        case 'bottomVerticalGraph':\n          // this.verticalBottomOnChange();\n          this.plotAllVerticalsBottomGraphs();\n          break;\n        default:\n          break;\n      }\n    },\n    downloadReport() {\n      console.log(global.localStorage.getItem('accessToken'));\n      Axios({\n        method: 'get',\n        url: `${Axios.defaults.baseURL}/api/v1/download-report`,\n        responseType: 'arraybuffer',\n      }).then((response) => {\n        const blob = new Blob([response.data], { type: 'application/pdf' });\n        const link = document.createElement('a');\n        link.href = window.URL.createObjectURL(blob);\n        link.download = 'Report.pdf';\n        link.click();\n      });\n    },\n    addSeriesInAverageChart() {\n      const avg = this.avg;\n      const resultArray = Object.keys(avg).map((key) => [\n        avg[key].companyName,\n        avg[key].avgRating,\n      ]);\n      this.averageChart.series[0].data = resultArray;\n    },\n    addSeriesInBottomAvgBCM() {\n      const avg = this.bottomAvgAccountBCM.avg;\n      const resultArray = Object.keys(avg).map((key) => [\n        avg[key].companyName,\n        avg[key].avgRating,\n      ]);\n      this.bottomBCMVerticalChart.series[0].data = resultArray;\n    },\n    addSeriesInBottomAvgCGLRH() {\n      const avg = this.bottomAvgAccountCGRLH.avg;\n      console.log(\n        'TCL: addSeriesInBottomAvgCGLRH -> avg',\n        this.bottomAvgAccountCGRLH,\n      );\n      const resultArray = Object.keys(avg).map((key) => [\n        avg[key].companyName,\n        avg[key].avgRating,\n      ]);\n\n      this.bottomCGRLHVerticalChart.series[0].data = resultArray;\n    },\n    addSeriesInBottomAvgHMS() {\n      const avg = this.bottomAvgAccountHMS.avg;\n      const resultArray = Object.keys(avg).map((key) => [\n        avg[key].companyName,\n        avg[key].avgRating,\n      ]);\n      this.bottomHMSVerticalChart.series[0].data = resultArray;\n    },\n    addSeriesInBottomAvgInsurance() {\n      const avg = this.bottomVerticalChartInsurance.avg;\n      const resultArray = Object.keys(avg).map((key) => [\n        avg[key].companyName,\n        avg[key].avgRating,\n      ]);\n      this.bottomInsuranceVerticalChart.series[0].data = resultArray;\n    },\n    // addSeriesInVerticlBottomAverageChart() {\n    //   const bcmAvg = this.bottomAvgAccounts.bcm.slice(0, 6);\n    //   console.log('TCL: addSeriesInVerticlBottomAverageChart -> bcmAvg', bcmAvg);\n    //   const resultArrayBCM = Object.keys(bcmAvg).map((key) => [bcmAvg[key].name, bcmAvg[key].rating]);\n    //   this.bottomBCMVerticalChart.series[0].data = resultArrayBCM;\n\n    //   const cgrlhAvg = this.bottomAvgAccounts.cgrlh.slice(0, 6);\n    //   const resultArrayCGRLH = Object.keys(cgrlhAvg).map((key) => [cgrlhAvg[key].name, cgrlhAvg[key].rating]);\n    //   this.bottomCGRLHVerticalChart.series[0].data = resultArrayCGRLH;\n\n    //   const insuranceAvg = this.bottomAvgAccounts.insurance.slice(0, 6);\n    //   const resultArrayInsurance = Object.keys(insuranceAvg).map((key) => [insuranceAvg[key].name, insuranceAvg[key].rating]);\n    //   this.bottomInsuranceVerticalChart.series[0].data = resultArrayInsurance;\n\n    //   const hmsAvg = this.bottomAvgAccounts.hms.slice(0, 6);\n    //   const resultArrayHMS = Object.keys(hmsAvg).map((key) => [hmsAvg[key].name, hmsAvg[key].rating]);\n    //   this.bottomHMSVerticalChart.series[0].data = resultArrayHMS;\n    // },\n    getDates(selectedPeriod) {\n      const date = new Date();\n      const currentDate = `${date.getFullYear()}-${date.getMonth()\n        + 1}-${date.getDate()}`;\n      const selectedDates = { from: null, to: currentDate };\n      let pastDate = new Date();\n      switch (selectedPeriod) {\n        case '5day':\n          pastDate = new Date(pastDate.setDate(date.getDate() - 5));\n          pastDate = `${pastDate.getFullYear()}-${pastDate.getMonth()\n            + 1}-${pastDate.getDate()}`;\n          selectedDates.from = pastDate;\n          break;\n        case '7day':\n          pastDate = new Date(pastDate.setDate(date.getDate() - 7));\n          pastDate = `${pastDate.getFullYear()}-${pastDate.getMonth()\n            + 1}-${pastDate.getDate()}`;\n          selectedDates.from = pastDate;\n          break;\n        case '15day':\n          pastDate = new Date(pastDate.setDate(date.getDate() - 15));\n          pastDate = `${pastDate.getFullYear()}-${pastDate.getMonth()\n            + 1}-${pastDate.getDate()}`;\n          selectedDates.from = pastDate;\n          break;\n        case 'monthly':\n          pastDate = new Date(pastDate.setMonth(date.getMonth() - 1));\n          pastDate = `${pastDate.getFullYear()}-${pastDate.getMonth()\n            + 1}-${pastDate.getDate()}`;\n          selectedDates.from = pastDate;\n          break;\n        default:\n          pastDate = new Date(pastDate.setDate(date.getDate() - 5));\n          pastDate = `${pastDate.getFullYear()}-${pastDate.getMonth()\n            + 1}-${pastDate.getDate()}`;\n          selectedDates.from = pastDate;\n          break;\n      }\n      return selectedDates;\n    },\n    formatHealthChartData(overallHealth) {\n      const vosRed = { name: 'VOS <=3', data: [] };\n      const vodRed = { name: 'VOD <=3', data: [] };\n      const vosGreen = { name: 'VOS >3', data: [] };\n      const vodGreen = { name: 'VOD >3', data: [] };\n      const categories = [];\n      overallHealth.forEach((e) => {\n        vosRed.data.push(e.vocMin);\n        vosGreen.data.push(e.vocMax);\n        vodRed.data.push(e.vodMin);\n        vodGreen.data.push(e.vodMax);\n        categories.push(e.vertical);\n      });\n      this.healthChart.xAxis.categories = categories;\n      const all = [vosRed, vodRed, vosGreen, vodGreen];\n      return all;\n    },\n    formatPivotChartGraph(pivotOverallRating) {\n      const vosAvg = { name: 'VOS Average', data: [] };\n      const vodAvg = { name: 'VOD Average', data: [] };\n      const avgRating = { name: 'Vertical Average', data: [] };\n      const categories = [];\n      pivotOverallRating.forEach((e) => {\n        vosAvg.data.push(e.vocAvg);\n        vodAvg.data.push(e.vodAvg);\n        avgRating.data.push(e.avgRating);\n        categories.push(e.verticalName);\n      });\n      this.pivotChart.xAxis.categories = categories;\n      const all = [avgRating, vosAvg, vodAvg];\n      return all;\n    },\n    // async avgGraphFilterOnChange() {\n    //   const allDates = this.getDates(this.selectedAvgFilter);\n    //   try {\n    //     const { data } = await this.$apollo.query({\n    //       addTypename: false,\n    //       query: BottomAvg,\n    //       variables: {\n    //         fromDate: allDates.from,\n    //         toDate: allDates.to,\n    //         vertical: 'BCM',\n    //       },\n    //       fetchPolicy: 'network-only',\n    //     });\n    //     this.avg = data.getBottomAccount;\n    //     this.averageChart.xAxis.categories = this.avg.map((m) => {\n    //       const c = m.companyName.split(' ');\n    //       if (c.length > 1) {\n    //         return c[0];\n    //       }\n    //       return c;\n    //     });\n    //     this.addSeriesInAverageChart();\n    //   } catch (error) {\n    //     console.log('bottom average error ---> ', error);\n    //   }\n    // },\n    async overallHealthOnChange() {\n      console.log('table', this.tableData);\n      const allDates = this.getDates(this.selectedHealthFilter);\n      try {\n        const { data } = await this.$apollo.query({\n          addTypename: false,\n          query: OverallHealth,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.overallHealth = data.getOverallAccountHealth;\n        this.healthChart.series = this.formatHealthChartData(\n          this.overallHealth,\n        );\n      } catch (error) {\n        console.log('bottom average error ---> ', error);\n      }\n    },\n    async getRootCauseVariationsChanges() {\n      console.log('tablgge', this.tableData);\n      const allDates = this.getDates(this.selectedHealthFilter);\n      try {\n        const { data } = await this.$apollo.query({\n          addTypename: false,\n          query: RootCauseVariations,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.tableData = data.getRootCauseVariations;\n        console.log('tasdble', this.tableData);\n      } catch (error) {\n        console.log('root caouse variations error ---> ', error);\n      }\n    },\n    getSortedArray(data) {\n      // eslint-disable-next-line no-param-reassign\n      data.forEach((account) => {\n        // eslint-disable-next-line no-param-reassign\n        account.rating = (account.lastVOCRating + account.lastVODRating) / 2;\n      });\n      const result = data && data.length ? data.sort((a, b) => a.rating - b.rating) : [];\n      return result;\n    },\n    getAvgOfArray(data) {\n      // const result = (data && data.length) ? data.reduce((a, b) => {\n      //   a.vocRatings + a.vodRatings + b.vocRatings + b.vodRatings\n      //   }, 0) / data.length : 0;\n      // return result;\n      // let vocRatings = 0;\n      // let vodRatings = 0;\n      // let vocFeedbacks = 0;\n      // let vodFeedbacks = 0;\n      let avgRating = 0;\n      let dataLength = 0;\n      if (data && data.length > 0) {\n        data.forEach((account) => {\n          if (account.name === 'Wells Fargo') {\n            console.log('account.name');\n          }\n          // vocRatings += account.vocRatings;\n          // vocFeedbacks += account.vocFeedbacks;\n          // vodRatings += account.vodRatings;\n          // vodFeedbacks += account.vodFeedbacks;\n          const avgVOC = account.vocFeedbacks !== 0\n            ? account.vocRatings / account.vocFeedbacks\n            : 0;\n          const avgVOD = account.vodFeedbacks !== 0\n            ? account.vodRatings / account.vodFeedbacks\n            : 0;\n          // console.log(`account: ${account.name}, vertical: ${account.vertical}`);\n          // console.log(`voc: ${account.vocRatings}, vocFeedbacks: ${account.vocFeedbacks}, vodRatings: ${account.vodRatings}, vodFeedbacks: ${account.vodFeedbacks}, avgVOC: ${avgVOC}, avgVOD: ${avgVOD}`);\n          avgRating += (avgVOC + avgVOD) / 2;\n        });\n        dataLength = data.length;\n      }\n      const result = dataLength !== 0 ? avgRating / dataLength : 0;\n      return result;\n    },\n    async plotAllVerticalsBottomGraphs() {\n      try {\n        await Promise.all([\n          this.verticalBottomBCMGraphs(),\n          this.verticalBottomGraphsHMS(),\n          this.verticalBottomGraphsCGLRH(),\n          this.verticalBottomGraphsInsurance(),\n        ]);\n      } catch (error) {\n        console.log('plotAllVerticalsBottomGraphs -->', error);\n      }\n    },\n    async verticalBottomBCMGraphs() {\n      const allDates = this.getDates(this.selectedBottomVerticalGraph);\n      try {\n        const { data } = await this.$apollo.query({\n          query: BottomAvg,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n            vertical: 'BCM',\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.bottomAvgAccountBCM.avg = data.getBottomAccount;\n        this.bottomBCMVerticalChart.xAxis.categories = this.bottomAvgAccountBCM.avg.map(\n          (m) => m.companyName,\n        );\n        this.addSeriesInBottomAvgBCM();\n      } catch (error) {\n        console.log('verticalBottomBCMGraphs error ---> ', error);\n      }\n    },\n    async verticalBottomGraphsHMS() {\n      const allDates = this.getDates(this.selectedBottomVerticalGraph);\n      try {\n        const { data } = await this.$apollo.query({\n          query: BottomAvg,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n            vertical: 'HMS',\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.bottomAvgAccountHMS.avg = data.getBottomAccount;\n        this.bottomHMSVerticalChart.xAxis.categories = this.bottomAvgAccountHMS.avg.map(\n          (m) => m.companyName,\n        );\n        this.addSeriesInBottomAvgHMS();\n        console.log(\n          'data vertical bottom graphs --> ',\n          this.bottomHMSVerticalChart,\n        );\n      } catch (error) {\n        console.log('verticalBottomGraphsHMS error ---> ', error);\n      }\n    },\n    async verticalBottomGraphsInsurance() {\n      const allDates = this.getDates(this.selectedBottomVerticalGraph);\n      try {\n        const { data } = await this.$apollo.query({\n          query: BottomAvg,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n            vertical: 'INSURANCE',\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.bottomVerticalChartInsurance.avg = data.getBottomAccount;\n        this.bottomInsuranceVerticalChart.xAxis.categories = this.bottomVerticalChartInsurance.avg.map(\n          (m) => m.companyName,\n        );\n        this.addSeriesInBottomAvgInsurance();\n        console.log(\n          'data vertical bottom graphs --> ',\n          this.bottomInsuranceVerticalChart,\n        );\n      } catch (error) {\n        console.log('verticalBottomGraphsInsurace error ---> ', error);\n      }\n    },\n    async verticalBottomGraphsCGLRH() {\n      const allDates = this.getDates(this.selectedBottomVerticalGraph);\n      try {\n        const { data } = await this.$apollo.query({\n          query: BottomAvg,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n            vertical: 'CGRLH',\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.bottomAvgAccountCGRLH.avg = data.getBottomAccount;\n        this.bottomCGRLHVerticalChart.xAxis.categories = this.bottomAvgAccountCGRLH.avg.map(\n          (m) => m.companyName,\n        );\n        this.addSeriesInBottomAvgCGLRH();\n        console.log(\n          'data vertical bottom graphs --> ',\n          this.bottomCGRLHVerticalChart,\n        );\n      } catch (error) {\n        console.log('verticalBottomGraphsCGLRH error ---> ', error);\n      }\n    },\n    // async verticalBottomOnChange() {\n    //   const allDates = this.getDates(this.selectedBottomVerticalGraph);\n    //   try {\n    //     const { data } = await this.$apollo.query({\n    //       addTypename: false,\n    //       query: VerticalWiseBottomAccounts,\n    //       variables: {\n    //         fromDate: allDates.from,\n    //         toDate: allDates.to,\n    //       },\n    //       fetchPolicy: 'network-only',\n    //     });\n    //     this.bottomAvgAccounts.bcm = (data.verticalWiseAccounts && data.verticalWiseAccounts.length) ? data.verticalWiseAccounts.filter((account) => account.vertical === 'BCM') : [];\n    //     this.bottomAvgAccounts.bcm = this.getSortedArray(this.bottomAvgAccounts.bcm);\n    //     this.bottomAvgAccounts.bcmAvg = this.getAvgOfArray(this.bottomAvgAccounts.bcm);\n    //     this.bottomAvgAccounts.cgrlh = (data.verticalWiseAccounts && data.verticalWiseAccounts.length) ? data.verticalWiseAccounts.filter((account) => account.vertical === 'CGRLH') : [];\n    //     this.bottomAvgAccounts.cgrlh = this.getSortedArray(this.bottomAvgAccounts.cgrlh);\n    //     this.bottomAvgAccounts.cgrlhAvg = this.getAvgOfArray(this.bottomAvgAccounts.cgrlh);\n    //     this.bottomAvgAccounts.insurance = (data.verticalWiseAccounts && data.verticalWiseAccounts.length) ? data.verticalWiseAccounts.filter((account) => account.vertical === 'Insurance') : [];\n    //     this.bottomAvgAccounts.insurance = this.getSortedArray(this.bottomAvgAccounts.insurance);\n    //     this.bottomAvgAccounts.insuranceAvg = this.getAvgOfArray(this.bottomAvgAccounts.insurance);\n    //     this.bottomAvgAccounts.hms = (data.verticalWiseAccounts && data.verticalWiseAccounts.length) ? data.verticalWiseAccounts.filter((account) => account.vertical === 'HMS') : [];\n    //     this.bottomAvgAccounts.hms = this.getSortedArray(this.bottomAvgAccounts.hms);\n    //     this.bottomAvgAccounts.hmsAvg = this.getAvgOfArray(this.bottomAvgAccounts.hms);\n    //     console.log(`bcm: ${this.bottomAvgAccounts.bcm.length}, CGRLH: ${this.bottomAvgAccounts.cgrlh.length}, Insurance: ${this.bottomAvgAccounts.insurance.length}, HMS: ${this.bottomAvgAccounts.hms.length}`);\n    //     console.log(`AVG bcm: ${this.bottomAvgAccounts.bcmAvg}, CGRLH: ${this.bottomAvgAccounts.cgrlhAvg}, Insurance: ${this.bottomAvgAccounts.insuranceAvg}, HMS: ${this.bottomAvgAccounts.hmsAvg}`);\n    //     const bcmFilter = this.pivotOverallRating.length > 0 ? this.pivotOverallRating.filter((account) => account.verticalName === 'BCM') : 0;\n    //     this.bottomAvgAccounts.bcmAvg = (bcmFilter.length > 0 && bcmFilter[0].avgRating) ? bcmFilter[0].avgRating : 0;\n    //     const cgrlhFilter = this.pivotOverallRating.length > 0 ? this.pivotOverallRating.filter((account) => account.verticalName === 'CGRLH') : 0;\n    //     this.bottomAvgAccounts.cgrlhAvg = (cgrlhFilter.length > 0 && cgrlhFilter[0].avgRating) ? cgrlhFilter[0].avgRating : 0;\n    //     const insuranceFilter = this.pivotOverallRating.length > 0 ? this.pivotOverallRating.filter((account) => account.verticalName === 'Insurance') : 0;\n    //     this.bottomAvgAccounts.insuranceAvg = (insuranceFilter.length > 0 && insuranceFilter[0].avgRating) ? insuranceFilter[0].avgRating : 0;\n    //     const hmsFilter = this.pivotOverallRating.length > 0 ? this.pivotOverallRating.filter((account) => account.verticalName === 'HMS') : 0;\n    //     this.bottomAvgAccounts.hmsAvg = (hmsFilter.length > 0 && hmsFilter[0].avgRating) ? hmsFilter[0].avgRating : 0;\n    //     // console.log(`AVG bcm: ${this.bottomAvgAccounts.bcmAvg}, CGRLH: ${this.bottomAvgAccounts.cgrlhAvg}, Insurance: ${this.bottomAvgAccounts.insuranceAvg}, HMS: ${this.bottomAvgAccounts.hmsAvg}`);\n    //     // console.log(`AVG bcm: ${this.bottomAvgAccounts.bcm[0].rating}, ${this.bottomAvgAccounts.bcm[this.bottomAvgAccounts.bcm.length - 1].rating}`);\n    //     this.bottomAvgAccounts.bcm.unshift({ name: 'Average(BCM)', rating: this.bottomAvgAccounts.bcmAvg });\n    //     this.bottomAvgAccounts.cgrlh.unshift({ name: 'Average(CGRLH)', rating: this.bottomAvgAccounts.cgrlhAvg });\n    //     this.bottomAvgAccounts.insurance.unshift({ name: 'Average(Insurance)', rating: this.bottomAvgAccounts.insuranceAvg });\n    //     this.bottomAvgAccounts.hms.unshift({ name: 'Average(HMS)', rating: this.bottomAvgAccounts.hmsAvg });\n    //     this.bottomBCMVerticalChart.xAxis.categories = this.bottomAvgAccounts.bcm.slice(0, 7).map((m) => {\n    //       const c = m.name.split(' ');\n    //       if (c.length > 1) {\n    //         return c[0];\n    //       }\n    //       return c;\n    //     });\n    //     this.bottomCGRLHVerticalChart.xAxis.categories = this.bottomAvgAccounts.cgrlh.slice(0, 7).map((m) => {\n    //       const c = m.name.split(' ');\n    //       if (c.length > 1) {\n    //         return c[0];\n    //       }\n    //       return c;\n    //     });\n    //     this.bottomInsuranceVerticalChart.xAxis.categories = this.bottomAvgAccounts.insurance.slice(0, 7).map((m) => {\n    //       const c = m.name.split(' ');\n    //       if (c.length > 1) {\n    //         return c[0];\n    //       }\n    //       return c;\n    //     });\n    //     this.bottomHMSVerticalChart.xAxis.categories = this.bottomAvgAccounts.hms.slice(0, 7).map((m) => {\n    //       const c = m.name.split(' ');\n    //       if (c.length > 1) {\n    //         return c[0];\n    //       }\n    //       return c;\n    //     });\n    //     this.addSeriesInVerticlBottomAverageChart();\n    //   } catch (error) {\n    //     console.log('bottom average error ---> ', error);\n    //   }\n    // },\n    formatCategoryWiseChartData(categoriesWise) {\n      // const data = [];\n      // const result = [];\n      // for (let i = 0; i < categoriesWise.length; i += 1) {\n      //   const total = categoriesWise[i].total;\n      //   categoriesWise[i].values.forEach((e) => {\n      //     data.push({ name: e.keyword, data: [(e.countofkeyword * 100) / total], vertical: [categoriesWise[i].verticalName] });\n      //   });\n      // }\n      // data.forEach((item) => {\n      //   const existing = result.filter((resultItem) => resultItem.name === item.name);\n      //   if (existing.length) {\n      //     const existingIndex = result.indexOf(existing[0]);\n      //     result[existingIndex].data.push(...item.data);\n      //     result[existingIndex].vertical.push(...item.vertical);\n      //   } else {\n      //     result.push(item);\n      //   }\n      // });\n      const staticValues = ['BCM', 'CGRLH', 'HMS', 'Insurance'];\n      const res = categoriesWise.reduce(\n        (r, { verticalName, total, values }) => {\n          values.forEach(({ keyword: name, countofkeyword }) => {\n            let temp = r.find((q) => q.name === name);\n            // eslint-disable-next-line no-unused-vars\n            if (!temp) {\n              r.push(\n                (temp = {\n                  name,\n                  // eslint-disable-next-line no-unused-vars\n                  data: staticValues.map((_) => 0),\n                  vertical: [...staticValues],\n                }),\n              );\n            }\n            temp.data[staticValues.indexOf(verticalName)] = (countofkeyword * 100) / total;\n          });\n          return r;\n        },\n        [],\n      );\n      return res;\n    },\n    async categoryWiseOnChange() {\n      const allDates = this.getDates(this.selectedCategoryWiseFilter);\n      try {\n        const { data } = await this.$apollo.query({\n          addTypename: false,\n          query: CategoryWise,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.categoriesWise = data.getCategoryWiseIssue;\n        this.categoryChart.series = this.formatCategoryWiseChartData(\n          this.categoriesWise,\n        );\n      } catch (error) {\n        console.log('categoryWiseOnChange error --->', error);\n      }\n    },\n    async pivotGraphOnChange() {\n      const allDates = this.getDates(this.selectedPivotGraphFilter);\n      try {\n        const { data } = await this.$apollo.query({\n          addTypename: false,\n          query: PivotGraph,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.pivotOverallRating = data.getPivotGraphData;\n        this.pivotChart.series = this.formatPivotChartGraph(\n          this.pivotOverallRating,\n        );\n      } catch (error) {\n        console.log('bottom average error ---> ', error);\n      }\n    },\n    async tableAverageRatingOnChange() {\n      console.log('tabnale', this.tableData);\n      const allDates = this.getDates(this.selectedTableAvgFilter);\n      try {\n        const { data } = await this.$apollo.query({\n          addTypename: false,\n          query: TableAvgRating,\n          variables: {\n            fromDate: allDates.from,\n            toDate: allDates.to,\n          },\n          fetchPolicy: 'network-only',\n        });\n        this.tableData = data.getRootCauseVariations;\n      } catch (error) {\n        console.log('bottom average error ---> ', error);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n// .feedback-row {\n//   position: relative;\n//   &:before {\n//     position: absolute;\n//     height: 97%;\n//     content: '';\n//     left: -10px;\n//     width: 3px;\n//     border-radius: 4px;\n//     top: 50%;\n//     transform: translateY(-50%);\n//     opacity: 0.8;\n//   }\n\n//   &.voc-row:before {\n//     background: #FF545E;\n//   }\n\n//   &.vod-row:before {\n//     background: #00ADCF;\n//   }\n// }\n.overflowScroll {\n  overflow: scroll !important;\n}\n</style>\n\n<style>\n.highcharts-credits {\n  display: none !important;\n}\n.none {\n  display: none;\n}\n\n.hccontainer {\n  height: 300px;\n  min-width: 310px;\n  max-width: 800px;\n}\n.scaled {\n  transform: scale(1);\n}\n</style>\n\n"]}